// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartDigitalPsico.Data.Context;

#nullable disable

namespace SmartDigitalPsico.Data.Migrations
{
    [DbContext(typeof(SmartDigitalPsicoDataContext))]
    partial class SmartDigitalPsicoDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("MedicalSpecialty", b =>
                {
                    b.Property<long>("MedicalsId")
                        .HasColumnType("bigint");

                    b.Property<long>("SpecialtiesId")
                        .HasColumnType("bigint");

                    b.HasKey("MedicalsId", "SpecialtiesId");

                    b.HasIndex("SpecialtiesId");

                    b.ToTable("MedicalSpecialty", "dbo");

                    b.HasData(
                        new
                        {
                            MedicalsId = 1L,
                            SpecialtiesId = 1L
                        });
                });

            modelBuilder.Entity("RoleGroupUser", b =>
                {
                    b.Property<long>("RoleGroupsId")
                        .HasColumnType("bigint");

                    b.Property<long>("UsersId")
                        .HasColumnType("bigint");

                    b.HasKey("RoleGroupsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleGroupUser", "dbo");

                    b.HasData(
                        new
                        {
                            RoleGroupsId = 1L,
                            UsersId = 1L
                        },
                        new
                        {
                            RoleGroupsId = 2L,
                            UsersId = 2L
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.ApplicationCacheLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CacheId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CacheKey")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime>("DateTimeSlidingExpiration")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.HasKey("Id");

                    b.ToTable("ApplicationCacheLog", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.ApplicationConfigSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("EndPointUrl_Cache")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EndPointUrl_StorageFiles")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<byte>("TypeLocationCache")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte>("TypeLocationQueeMessaging")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte>("TypeLocationSaveFiles")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("Id");

                    b.ToTable("ApplicationConfigSetting", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(812),
                            Description = "Default",
                            Enable = true,
                            EndPointUrl_Cache = "",
                            EndPointUrl_StorageFiles = "",
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(815),
                            ModifyDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(815),
                            TypeLocationCache = (byte)1,
                            TypeLocationQueeMessaging = (byte)0,
                            TypeLocationSaveFiles = (byte)0
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.ApplicationLanguage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<string>("LanguageKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LanguageValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<string>("ResourceKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ResourceKey", "Language", "LanguageKey")
                        .IsUnique()
                        .HasDatabaseName("Idx_ApplicationLanguage_ResourceKey_Language_LanguageKey_Unique");

                    b.ToTable("ApplicationLanguage", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1023),
                            Description = "Registro atualizado",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "RegisterUpdated",
                            LanguageValue = "Registro atualizado",
                            LastAccessDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1024),
                            ModifyDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1024),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1026),
                            Description = "Default",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "Default_ptbr",
                            LanguageValue = "Padrão",
                            LastAccessDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1027),
                            ModifyDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1026),
                            ResourceKey = "ApplicationLanguage"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1028),
                            Description = "Registro encontrado",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "RegisterIsFound",
                            LanguageValue = "Registro encontrado",
                            LastAccessDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1029),
                            ModifyDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1029),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1030),
                            Description = "Registro não encontrado",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "RegisterIsNotFound",
                            LanguageValue = "Registro não encontrado",
                            LastAccessDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1031),
                            ModifyDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1031),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1032),
                            Description = "Registro existe",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "RegisterExist",
                            LanguageValue = "Registro existe",
                            LastAccessDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1033),
                            ModifyDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1033),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 6L,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1034),
                            Description = "Registro deletado",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "RegisterDeleted",
                            LanguageValue = "Registro deletado",
                            LastAccessDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1035),
                            ModifyDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1035),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 7L,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1037),
                            Description = "Registro localizado",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "RegisterFind",
                            LanguageValue = "Registro localizado",
                            LastAccessDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1037),
                            ModifyDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1037),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 8L,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1039),
                            Description = "Registros contabilizados",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "RegisterCounted",
                            LanguageValue = "Registros contabilizados",
                            LastAccessDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1039),
                            ModifyDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1039),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 9L,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1041),
                            Description = "Registro criado",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "RegisterCreated",
                            LanguageValue = "Registro criado",
                            LastAccessDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1041),
                            ModifyDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1041),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 10L,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1043),
                            Description = "A descrição não pode ser vazia",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Description_Null",
                            LanguageValue = "A descrição não pode ser vazia",
                            LastAccessDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1044),
                            ModifyDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1043),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 11L,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1045),
                            Description = "O idoma não pode ser vazio",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Language_Null",
                            LanguageValue = "O idoma não pode ser vazio",
                            LastAccessDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1046),
                            ModifyDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1045),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 12L,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1047),
                            Description = "O idoma não pode ultrapassar {MaxLength}",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Language_MaximumLength",
                            LanguageValue = "O idoma não pode ultrapassar {MaxLength}",
                            LastAccessDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1048),
                            ModifyDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1047),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 13L,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1049),
                            Description = "Válido",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "LangValid",
                            LanguageValue = "Válido",
                            LastAccessDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1050),
                            ModifyDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1049),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 14L,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1051),
                            Description = "Ocorreram erros!",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "LangErrors",
                            LanguageValue = "Ocorreram erros!",
                            LastAccessDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1051),
                            ModifyDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1051),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 15L,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1053),
                            Description = "O medico deve ser informado.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_MedicalId_Null",
                            LanguageValue = "O medico deve ser informado.",
                            LastAccessDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1053),
                            ModifyDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1053),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 16L,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1055),
                            Description = "O medico informado não existe.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_MedicalId_NotFound",
                            LanguageValue = "O medico informado não existe.",
                            LastAccessDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1055),
                            ModifyDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1055),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 17L,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1057),
                            Description = "O medico infomado deve ser o mesmo logado. Medicos",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Medical_Changed",
                            LanguageValue = "O medico infomado deve ser o mesmo logado. Medicos nao podem criar arquivos de outro medico.",
                            LastAccessDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1057),
                            ModifyDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1057),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 18L,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1059),
                            Description = "O nome não pode ser vazio",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Name_Null",
                            LanguageValue = "O nome não pode ser vazio",
                            LastAccessDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1059),
                            ModifyDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1059),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 19L,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1061),
                            Description = "O Login não pode ser vazio.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Login_Null",
                            LanguageValue = "O Login não pode ser vazio.",
                            LastAccessDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1061),
                            ModifyDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1061),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 20L,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1063),
                            Description = "Login deve ser unico.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Login_Unique",
                            LanguageValue = "Login deve ser unico.",
                            LastAccessDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1063),
                            ModifyDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1063),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 21L,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1065),
                            Description = "O Email não pode ser vazio",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Email_Null",
                            LanguageValue = "O Email não pode ser vazio",
                            LastAccessDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1065),
                            ModifyDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1065),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 22L,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1066),
                            Description = "O Email é invalido.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Email_Invalid",
                            LanguageValue = "O Email é invalido.",
                            LastAccessDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1067),
                            ModifyDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1067),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 23L,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1068),
                            Description = "O Email deve ser unico.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Email_Unique",
                            LanguageValue = "O Email deve ser unico.",
                            LastAccessDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1069),
                            ModifyDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1069),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 24L,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1070),
                            Description = "O Credenciamento não pode ser vazio.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Accreditation_Null",
                            LanguageValue = "O Credenciamento não pode ser vazio.",
                            LastAccessDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1071),
                            ModifyDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1071),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 25L,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1073),
                            Description = "O Credenciamento deve ser unico.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Accreditation_Unique",
                            LanguageValue = "O Credenciamento deve ser unico.",
                            LastAccessDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1073),
                            ModifyDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1073),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 26L,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1075),
                            Description = "O medico infomado deve ser o mesmo logado. Medicos",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_MedicalCreated_Invalid",
                            LanguageValue = "O medico infomado deve ser o mesmo logado. Medicos nao podem criar arquivos de outro medico.",
                            LastAccessDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1075),
                            ModifyDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1075),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 27L,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1077),
                            Description = "O medico infomado deve ser o mesmo logado. Medicos",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_MedicalModify_Invalid",
                            LanguageValue = "O medico infomado deve ser o mesmo logado. Medicos nao podem modificar arquivos de outro medico.",
                            LastAccessDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1077),
                            ModifyDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1077),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 28L,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1079),
                            Description = "O Paciente deve ser informado.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Patient_Null",
                            LanguageValue = "O Paciente deve ser informado.",
                            LastAccessDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1079),
                            ModifyDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1079),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 29L,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1081),
                            Description = "O Paciente informado não existe.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Patient_NotFound",
                            LanguageValue = "O Paciente informado não existe.",
                            LastAccessDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1081),
                            ModifyDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1081),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 30L,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1083),
                            Description = "O Paciente não pode ser alterado.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Patient_Changed",
                            LanguageValue = "O Paciente não pode ser alterado.",
                            LastAccessDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1083),
                            ModifyDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1083),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 31L,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1085),
                            Description = "Informações do paciente não podem ser adicionadas ",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Patient_Medical_Created",
                            LanguageValue = "Informações do paciente não podem ser adicionadas por outro medico e/ou usuario.",
                            LastAccessDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1085),
                            ModifyDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1085),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 32L,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1113),
                            Description = "Informações do paciente não podem ser modificadas ",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Patient_Medical_Modify",
                            LanguageValue = "Informações do paciente não podem ser modificadas por outro medico e/ou usuario.",
                            LastAccessDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1114),
                            ModifyDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1113),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 33L,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1115),
                            Description = "O Usuário que está criando deve ser informado.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_CreatedUserId_Null",
                            LanguageValue = "O Usuário que está criando deve ser informado.",
                            LastAccessDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1116),
                            ModifyDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1116),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 34L,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1117),
                            Description = "A anotação não pode ser vazia.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Annotation_Null",
                            LanguageValue = "A anotação não pode ser vazia.",
                            LastAccessDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1118),
                            ModifyDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1118),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 35L,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1119),
                            Description = "A data da anotação não pode ser vazia.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_AnnotationDate_Null",
                            LanguageValue = "A data da anotação não pode ser vazia.",
                            LastAccessDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1120),
                            ModifyDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1120),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 36L,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1121),
                            Description = "Data de nascimento invalido",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_DateOfBirth_Invalid",
                            LanguageValue = "Data de nascimento invalido",
                            LastAccessDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1122),
                            ModifyDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1122),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 37L,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1123),
                            Description = "O Rg não pode ser vazio.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_RG_Null",
                            LanguageValue = "O Rg não pode ser vazio.",
                            LastAccessDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1124),
                            ModifyDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1124),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 38L,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1125),
                            Description = "O CPF não pode ser vazio.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_CPF_Null",
                            LanguageValue = "O CPF não pode ser vazio.",
                            LastAccessDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1126),
                            ModifyDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1125),
                            ResourceKey = "SharedResource"
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.Gender", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.HasKey("Id");

                    b.ToTable("Gender", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1240),
                            Description = "Masculino",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1242),
                            Description = "Feminino",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.InfoTag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<long>("MedicalId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("MedicalId");

                    b.HasIndex("ModifyUserId");

                    b.ToTable("InfoTag", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.Medical", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Accreditation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Email")
                        .HasColumnOrder(3);

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Name")
                        .HasColumnOrder(2);

                    b.Property<long>("OfficeId")
                        .HasColumnType("bigint");

                    b.Property<string>("SecurityKey")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<byte>("TypeAccreditation")
                        .HasColumnType("tinyint unsigned");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifyUserId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("UserId");

                    b.ToTable("Medical", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Accreditation = "123456",
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1347),
                            CreatedUserId = 1L,
                            Email = "medical@sistemas.com",
                            Enable = true,
                            LastAccessDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1348),
                            ModifyDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1348),
                            Name = "Medical MOCK ",
                            OfficeId = 1L,
                            SecurityKey = "",
                            TypeAccreditation = (byte)0
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.MedicalCalendar", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("AllDay")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ColorCategory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<long>("MedicalId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<bool>("PushedCalendar")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("MedicalId");

                    b.HasIndex("ModifyUserId");

                    b.HasIndex("PatientId");

                    b.ToTable("MedicalCalendar", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.MedicalFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Description");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("FileContentType")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FileContentType");

                    b.Property<byte[]>("FileData")
                        .HasColumnType("longblob")
                        .HasColumnName("FileData");

                    b.Property<string>("FileExtension")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("FileExtension");

                    b.Property<string>("FileName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FileName");

                    b.Property<string>("FilePath")
                        .HasMaxLength(2083)
                        .HasColumnType("varchar(2083)")
                        .HasColumnName("FilePath");

                    b.Property<long>("FileSizeKB")
                        .HasColumnType("bigint")
                        .HasColumnName("FileSizeKB");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<long>("MedicalId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<byte>("TypeLocationSaveFile")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("TypeLocationSaveFile");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("MedicalId");

                    b.HasIndex("ModifyUserId");

                    b.ToTable("MedicalFile", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.Office", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.HasKey("Id");

                    b.ToTable("Office", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1590),
                            Description = "Psicólogo",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1592),
                            Description = "Psicóloga",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1593),
                            Description = "Clínico",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.Patient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AddressCep")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("AddressCity")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AddressNeighborhood")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AddressState")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AddressStreet")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Education")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Email")
                        .HasColumnOrder(3);

                    b.Property<string>("EmergencyContactName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EmergencyContactPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<long>("GenderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<byte>("MaritalStatus")
                        .HasColumnType("tinyint unsigned");

                    b.Property<long>("MedicalId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Name")
                        .HasColumnOrder(2);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Profession")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Rg")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("GenderId");

                    b.HasIndex("MedicalId");

                    b.HasIndex("ModifyUserId");

                    b.ToTable("Patient", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AddressCep = "45675-970",
                            AddressCity = "Aurelino Leal",
                            AddressNeighborhood = "Centro",
                            AddressState = "Bahia",
                            AddressStreet = "Avenida Presidente Médici 264",
                            Cpf = "947.846.605-42",
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1698),
                            CreatedUserId = 2L,
                            DateOfBirth = new DateTime(1960, 3, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Education = "Superior",
                            Email = "tiago.thales.mendes@andrade.com",
                            EmergencyContactName = "Milena Isabelly Vanessa",
                            EmergencyContactPhoneNumber = "(73) 98540-4268",
                            Enable = true,
                            GenderId = 1L,
                            LastAccessDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1698),
                            MaritalStatus = (byte)0,
                            MedicalId = 1L,
                            ModifyDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1699),
                            Name = "Tiago Thales Mendes",
                            PhoneNumber = "(73) 2877-3408",
                            Profession = "Professor",
                            Rg = "13.809.283-7"
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.PatientAdditionalInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("FollowUp_Neurological")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("FollowUp_Psychiatric")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifyUserId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientAdditionalInformation", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.PatientFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Description");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("FileContentType")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FileContentType");

                    b.Property<byte[]>("FileData")
                        .HasColumnType("longblob")
                        .HasColumnName("FileData");

                    b.Property<string>("FileExtension")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("FileExtension");

                    b.Property<string>("FileName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FileName");

                    b.Property<string>("FilePath")
                        .HasMaxLength(2083)
                        .HasColumnType("varchar(2083)")
                        .HasColumnName("FilePath");

                    b.Property<long>("FileSizeKB")
                        .HasColumnType("bigint")
                        .HasColumnName("FileSizeKB");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<byte>("TypeLocationSaveFile")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("TypeLocationSaveFile");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifyUserId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientFile", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.PatientHospitalizationInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CID")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Observation")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifyUserId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientHospitalizationInformation", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.PatientInfoTag", b =>
                {
                    b.Property<long>("InfoTagId")
                        .HasColumnType("bigint");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.HasKey("InfoTagId", "PatientId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientInfoTag", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.PatientMedicationInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<string>("MainDrug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<string>("Posology")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifyUserId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientMedicationInformation", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.PatientNotificationMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsReaded")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<string>("MessagePatient")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Notified")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("NotifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ReadingDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifyUserId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientNotificationMessage", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.PatientRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Annotation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("AnnotationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifyUserId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientRecord", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.RoleGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<string>("RolePolicyClaimCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.HasKey("Id");

                    b.ToTable("RoleGroup", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1802),
                            Description = "Administrador",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RolePolicyClaimCode = "Admin"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1804),
                            Description = "Medico",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RolePolicyClaimCode = "Medical"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1805),
                            Description = "Recepcionista",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RolePolicyClaimCode = "Staff"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1806),
                            Description = "Paciente",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RolePolicyClaimCode = "Patient"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1807),
                            Description = "Leitura",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RolePolicyClaimCode = "Read"
                        },
                        new
                        {
                            Id = 6L,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1808),
                            Description = "Escrita",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RolePolicyClaimCode = "Write"
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.Specialty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.HasKey("Id");

                    b.ToTable("Specialty", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1901),
                            Description = "Psicologia Clínica",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1924),
                            Description = "Psicologia Social",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1926),
                            Description = "Psicologia educacional",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4L,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1927),
                            Description = "Psicologia Esportiva ",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5L,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1928),
                            Description = "Psicologia organizacional",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6L,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1929),
                            Description = "Psicologia hospitalar",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7L,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(1930),
                            Description = "Psicologia do trânsito",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Admin")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Email")
                        .HasColumnOrder(3);

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.Property<long?>("MedicalId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Name")
                        .HasColumnOrder(2);

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("Refresh_token_expiry_time");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("MedicalId");

                    b.ToTable("User", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Admin = true,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(2032),
                            Email = "admin@sistemas.com",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(2033),
                            Login = "admin",
                            ModifyDate = new DateTime(2024, 4, 7, 19, 37, 53, 888, DateTimeKind.Utc).AddTicks(2033),
                            Name = "User MOCK ",
                            PasswordHash = new byte[] { 228, 113, 83, 109, 212, 66, 130, 10, 139, 218, 144, 209, 241, 133, 114, 126, 147, 23, 145, 63, 130, 138, 203, 22, 97, 119, 109, 46, 28, 223, 114, 194, 41, 27, 0, 60, 222, 237, 118, 25, 74, 41, 75, 152, 212, 198, 178, 21, 196, 112, 22, 81, 167, 137, 182, 74, 178, 231, 96, 174, 22, 96, 53, 246 },
                            PasswordSalt = new byte[] { 199, 46, 120, 153, 99, 118, 89, 13, 98, 188, 197, 206, 190, 190, 230, 99, 221, 148, 30, 56, 59, 127, 196, 158, 22, 188, 61, 106, 25, 144, 86, 188, 130, 244, 61, 84, 184, 150, 131, 145, 174, 86, 45, 201, 16, 239, 219, 38, 0, 181, 8, 69, 234, 78, 25, 9, 187, 234, 103, 241, 108, 105, 72, 152, 69, 184, 166, 41, 162, 38, 177, 222, 170, 9, 137, 25, 29, 157, 53, 112, 123, 254, 222, 125, 2, 47, 198, 36, 60, 3, 190, 237, 121, 241, 222, 177, 248, 223, 111, 66, 70, 123, 25, 55, 193, 247, 197, 12, 83, 237, 186, 156, 58, 25, 167, 214, 64, 79, 99, 171, 185, 80, 2, 24, 29, 147, 215, 201 },
                            RefreshToken = "",
                            Role = "Admin",
                            TimeZone = "E. South America Standard Time"
                        },
                        new
                        {
                            Id = 2L,
                            Admin = false,
                            CreatedDate = new DateTime(2024, 4, 7, 19, 37, 53, 890, DateTimeKind.Utc).AddTicks(2987),
                            Email = "doctor@sistemas.com",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(2024, 4, 7, 19, 37, 53, 890, DateTimeKind.Utc).AddTicks(2988),
                            Login = "doctor",
                            MedicalId = 1L,
                            ModifyDate = new DateTime(2024, 4, 7, 19, 37, 53, 890, DateTimeKind.Utc).AddTicks(2988),
                            Name = "User Medical",
                            PasswordHash = new byte[] { 74, 94, 28, 76, 117, 146, 111, 52, 115, 192, 10, 254, 221, 209, 205, 110, 231, 2, 17, 135, 228, 48, 213, 146, 83, 25, 203, 10, 144, 176, 12, 100, 116, 58, 220, 251, 140, 59, 135, 35, 240, 239, 196, 77, 221, 56, 122, 76, 38, 106, 223, 228, 69, 196, 21, 114, 37, 233, 180, 148, 226, 133, 237, 10 },
                            PasswordSalt = new byte[] { 46, 168, 145, 199, 236, 105, 149, 137, 127, 223, 155, 142, 196, 235, 98, 151, 251, 140, 195, 124, 255, 152, 207, 143, 111, 57, 82, 111, 47, 142, 145, 48, 138, 53, 24, 147, 25, 5, 237, 59, 55, 104, 151, 61, 132, 53, 90, 0, 103, 51, 54, 228, 127, 213, 99, 168, 241, 35, 196, 112, 102, 235, 168, 179, 116, 38, 253, 120, 215, 96, 117, 38, 219, 114, 174, 23, 7, 180, 17, 178, 116, 224, 83, 130, 72, 87, 141, 178, 68, 200, 245, 252, 221, 209, 112, 251, 156, 153, 91, 3, 39, 89, 196, 5, 190, 52, 48, 245, 43, 17, 150, 157, 162, 114, 237, 48, 92, 9, 98, 119, 143, 203, 78, 73, 151, 187, 150, 136 },
                            RefreshToken = "",
                            Role = "Medical",
                            TimeZone = "E. South America Standard Time"
                        });
                });

            modelBuilder.Entity("MedicalSpecialty", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Medical", null)
                        .WithMany()
                        .HasForeignKey("MedicalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Specialty", null)
                        .WithMany()
                        .HasForeignKey("SpecialtiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleGroupUser", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.RoleGroup", null)
                        .WithMany()
                        .HasForeignKey("RoleGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.InfoTag", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Medical", "Medical")
                        .WithMany()
                        .HasForeignKey("MedicalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserId");

                    b.Navigation("CreatedUser");

                    b.Navigation("Medical");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.Medical", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "CreatedUser")
                        .WithMany("MedicalsCreateds")
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "ModifyUser")
                        .WithMany("MedicalModifies")
                        .HasForeignKey("ModifyUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Office", "Office")
                        .WithMany("Medicals")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "User")
                        .WithMany("MedicalsUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifyUser");

                    b.Navigation("Office");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.MedicalCalendar", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Medical", "Medical")
                        .WithMany()
                        .HasForeignKey("MedicalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.Navigation("CreatedUser");

                    b.Navigation("Medical");

                    b.Navigation("ModifyUser");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.MedicalFile", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Medical", "Medical")
                        .WithMany()
                        .HasForeignKey("MedicalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserId");

                    b.Navigation("CreatedUser");

                    b.Navigation("Medical");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.Patient", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Gender", "Gender")
                        .WithMany("Patients")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Medical", "Medical")
                        .WithMany("Patienties")
                        .HasForeignKey("MedicalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserId");

                    b.Navigation("CreatedUser");

                    b.Navigation("Gender");

                    b.Navigation("Medical");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.PatientAdditionalInformation", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Patient", "Patient")
                        .WithMany("PatientAdditionalInformations")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifyUser");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.PatientFile", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifyUser");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.PatientHospitalizationInformation", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Patient", "Patient")
                        .WithMany("PatientHospitalizationInformations")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifyUser");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.PatientInfoTag", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.InfoTag", "InfoTag")
                        .WithMany("PatientInfoTags")
                        .HasForeignKey("InfoTagId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Patient", "Patient")
                        .WithMany("PatientInfoTags")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("InfoTag");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.PatientMedicationInformation", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Patient", "Patient")
                        .WithMany("PatientMedicationInformations")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifyUser");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.PatientNotificationMessage", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifyUser");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.PatientRecord", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Patient", "Patient")
                        .WithMany("PatientRecords")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifyUser");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.User", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Medical", "Medical")
                        .WithMany()
                        .HasForeignKey("MedicalId");

                    b.Navigation("Medical");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.Gender", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.InfoTag", b =>
                {
                    b.Navigation("PatientInfoTags");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.Medical", b =>
                {
                    b.Navigation("Patienties");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.Office", b =>
                {
                    b.Navigation("Medicals");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.Patient", b =>
                {
                    b.Navigation("PatientAdditionalInformations");

                    b.Navigation("PatientHospitalizationInformations");

                    b.Navigation("PatientInfoTags");

                    b.Navigation("PatientMedicationInformations");

                    b.Navigation("PatientRecords");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.User", b =>
                {
                    b.Navigation("MedicalModifies");

                    b.Navigation("MedicalsCreateds");

                    b.Navigation("MedicalsUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
