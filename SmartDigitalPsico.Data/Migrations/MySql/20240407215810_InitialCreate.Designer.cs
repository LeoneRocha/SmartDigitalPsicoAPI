// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartDigitalPsico.Data.Context;

#nullable disable

namespace SmartDigitalPsico.Data.Migrations
{
    [DbContext(typeof(SmartDigitalPsicoDataContextMySql))]
    [Migration("20240407215810_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.ApplicationCacheLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CacheId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CacheKey")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime>("DateTimeSlidingExpiration")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.HasKey("Id");

                    b.ToTable("ApplicationCacheLog", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.ApplicationConfigSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("EndPointUrl_Cache")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EndPointUrl_StorageFiles")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<byte>("TypeLocationCache")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte>("TypeLocationQueeMessaging")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte>("TypeLocationSaveFiles")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("Id");

                    b.ToTable("ApplicationConfigSetting", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6261),
                            Description = "Default",
                            Enable = true,
                            EndPointUrl_Cache = "",
                            EndPointUrl_StorageFiles = "",
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6264),
                            ModifyDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6264),
                            TypeLocationCache = (byte)1,
                            TypeLocationQueeMessaging = (byte)0,
                            TypeLocationSaveFiles = (byte)0
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.ApplicationLanguage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<string>("LanguageKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LanguageValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<string>("ResourceKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ResourceKey", "Language", "LanguageKey")
                        .IsUnique()
                        .HasDatabaseName("Idx_ApplicationLanguage_ResourceKey_Language_LanguageKey_Unique");

                    b.ToTable("ApplicationLanguage", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6479),
                            Description = "Registro atualizado",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "RegisterUpdated",
                            LanguageValue = "Registro atualizado",
                            LastAccessDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6480),
                            ModifyDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6479),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6481),
                            Description = "Default",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "Default_ptbr",
                            LanguageValue = "Padrão",
                            LastAccessDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6482),
                            ModifyDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6482),
                            ResourceKey = "ApplicationLanguage"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6483),
                            Description = "Registro encontrado",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "RegisterIsFound",
                            LanguageValue = "Registro encontrado",
                            LastAccessDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6484),
                            ModifyDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6484),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6486),
                            Description = "Registro não encontrado",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "RegisterIsNotFound",
                            LanguageValue = "Registro não encontrado",
                            LastAccessDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6486),
                            ModifyDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6486),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6488),
                            Description = "Registro existe",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "RegisterExist",
                            LanguageValue = "Registro existe",
                            LastAccessDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6488),
                            ModifyDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6488),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 6L,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6490),
                            Description = "Registro deletado",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "RegisterDeleted",
                            LanguageValue = "Registro deletado",
                            LastAccessDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6490),
                            ModifyDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6490),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 7L,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6492),
                            Description = "Registro localizado",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "RegisterFind",
                            LanguageValue = "Registro localizado",
                            LastAccessDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6492),
                            ModifyDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6492),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 8L,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6494),
                            Description = "Registros contabilizados",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "RegisterCounted",
                            LanguageValue = "Registros contabilizados",
                            LastAccessDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6495),
                            ModifyDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6494),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 9L,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6496),
                            Description = "Registro criado",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "RegisterCreated",
                            LanguageValue = "Registro criado",
                            LastAccessDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6497),
                            ModifyDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6496),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 10L,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6498),
                            Description = "A descrição não pode ser vazia",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Description_Null",
                            LanguageValue = "A descrição não pode ser vazia",
                            LastAccessDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6499),
                            ModifyDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6498),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 11L,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6500),
                            Description = "O idoma não pode ser vazio",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Language_Null",
                            LanguageValue = "O idoma não pode ser vazio",
                            LastAccessDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6501),
                            ModifyDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6500),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 12L,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6502),
                            Description = "O idoma não pode ultrapassar {MaxLength}",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Language_MaximumLength",
                            LanguageValue = "O idoma não pode ultrapassar {MaxLength}",
                            LastAccessDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6503),
                            ModifyDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6502),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 13L,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6504),
                            Description = "Válido",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "LangValid",
                            LanguageValue = "Válido",
                            LastAccessDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6505),
                            ModifyDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6504),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 14L,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6506),
                            Description = "Ocorreram erros!",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "LangErrors",
                            LanguageValue = "Ocorreram erros!",
                            LastAccessDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6507),
                            ModifyDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6506),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 15L,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6508),
                            Description = "O medico deve ser informado.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_MedicalId_Null",
                            LanguageValue = "O medico deve ser informado.",
                            LastAccessDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6509),
                            ModifyDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6508),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 16L,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6510),
                            Description = "O medico informado não existe.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_MedicalId_NotFound",
                            LanguageValue = "O medico informado não existe.",
                            LastAccessDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6511),
                            ModifyDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6510),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 17L,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6512),
                            Description = "O medico infomado deve ser o mesmo logado. Medicos",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Medical_Changed",
                            LanguageValue = "O medico infomado deve ser o mesmo logado. Medicos nao podem criar arquivos de outro medico.",
                            LastAccessDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6513),
                            ModifyDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6512),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 18L,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6514),
                            Description = "O nome não pode ser vazio",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Name_Null",
                            LanguageValue = "O nome não pode ser vazio",
                            LastAccessDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6515),
                            ModifyDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6514),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 19L,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6516),
                            Description = "O Login não pode ser vazio.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Login_Null",
                            LanguageValue = "O Login não pode ser vazio.",
                            LastAccessDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6517),
                            ModifyDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6516),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 20L,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6518),
                            Description = "Login deve ser unico.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Login_Unique",
                            LanguageValue = "Login deve ser unico.",
                            LastAccessDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6519),
                            ModifyDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6518),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 21L,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6520),
                            Description = "O Email não pode ser vazio",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Email_Null",
                            LanguageValue = "O Email não pode ser vazio",
                            LastAccessDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6521),
                            ModifyDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6521),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 22L,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6522),
                            Description = "O Email é invalido.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Email_Invalid",
                            LanguageValue = "O Email é invalido.",
                            LastAccessDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6523),
                            ModifyDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6523),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 23L,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6524),
                            Description = "O Email deve ser unico.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Email_Unique",
                            LanguageValue = "O Email deve ser unico.",
                            LastAccessDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6525),
                            ModifyDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6525),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 24L,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6526),
                            Description = "O Credenciamento não pode ser vazio.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Accreditation_Null",
                            LanguageValue = "O Credenciamento não pode ser vazio.",
                            LastAccessDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6527),
                            ModifyDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6526),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 25L,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6528),
                            Description = "O Credenciamento deve ser unico.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Accreditation_Unique",
                            LanguageValue = "O Credenciamento deve ser unico.",
                            LastAccessDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6529),
                            ModifyDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6529),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 26L,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6530),
                            Description = "O medico infomado deve ser o mesmo logado. Medicos",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_MedicalCreated_Invalid",
                            LanguageValue = "O medico infomado deve ser o mesmo logado. Medicos nao podem criar arquivos de outro medico.",
                            LastAccessDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6531),
                            ModifyDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6530),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 27L,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6532),
                            Description = "O medico infomado deve ser o mesmo logado. Medicos",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_MedicalModify_Invalid",
                            LanguageValue = "O medico infomado deve ser o mesmo logado. Medicos nao podem modificar arquivos de outro medico.",
                            LastAccessDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6533),
                            ModifyDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6533),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 28L,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6534),
                            Description = "O Paciente deve ser informado.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Patient_Null",
                            LanguageValue = "O Paciente deve ser informado.",
                            LastAccessDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6535),
                            ModifyDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6535),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 29L,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6536),
                            Description = "O Paciente informado não existe.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Patient_NotFound",
                            LanguageValue = "O Paciente informado não existe.",
                            LastAccessDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6537),
                            ModifyDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6537),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 30L,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6538),
                            Description = "O Paciente não pode ser alterado.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Patient_Changed",
                            LanguageValue = "O Paciente não pode ser alterado.",
                            LastAccessDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6539),
                            ModifyDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6539),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 31L,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6540),
                            Description = "Informações do paciente não podem ser adicionadas ",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Patient_Medical_Created",
                            LanguageValue = "Informações do paciente não podem ser adicionadas por outro medico e/ou usuario.",
                            LastAccessDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6541),
                            ModifyDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6541),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 32L,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6542),
                            Description = "Informações do paciente não podem ser modificadas ",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Patient_Medical_Modify",
                            LanguageValue = "Informações do paciente não podem ser modificadas por outro medico e/ou usuario.",
                            LastAccessDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6543),
                            ModifyDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6543),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 33L,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6544),
                            Description = "O Usuário que está criando deve ser informado.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_CreatedUserId_Null",
                            LanguageValue = "O Usuário que está criando deve ser informado.",
                            LastAccessDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6545),
                            ModifyDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6545),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 34L,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6577),
                            Description = "A anotação não pode ser vazia.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Annotation_Null",
                            LanguageValue = "A anotação não pode ser vazia.",
                            LastAccessDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6578),
                            ModifyDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6578),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 35L,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6580),
                            Description = "A data da anotação não pode ser vazia.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_AnnotationDate_Null",
                            LanguageValue = "A data da anotação não pode ser vazia.",
                            LastAccessDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6580),
                            ModifyDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6580),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 36L,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6581),
                            Description = "Data de nascimento invalido",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_DateOfBirth_Invalid",
                            LanguageValue = "Data de nascimento invalido",
                            LastAccessDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6582),
                            ModifyDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6582),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 37L,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6583),
                            Description = "O Rg não pode ser vazio.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_RG_Null",
                            LanguageValue = "O Rg não pode ser vazio.",
                            LastAccessDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6584),
                            ModifyDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6584),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 38L,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6585),
                            Description = "O CPF não pode ser vazio.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_CPF_Null",
                            LanguageValue = "O CPF não pode ser vazio.",
                            LastAccessDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6586),
                            ModifyDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6586),
                            ResourceKey = "SharedResource"
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.Gender", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.HasKey("Id");

                    b.ToTable("Gender", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6700),
                            Description = "Masculino",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6701),
                            Description = "Feminino",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.InfoTag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<long>("MedicalId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("MedicalId");

                    b.HasIndex("ModifyUserId");

                    b.ToTable("InfoTag", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.Medical", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Accreditation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Email")
                        .HasColumnOrder(3);

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Name")
                        .HasColumnOrder(2);

                    b.Property<long>("OfficeId")
                        .HasColumnType("bigint");

                    b.Property<string>("SecurityKey")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<byte>("TypeAccreditation")
                        .HasColumnType("tinyint unsigned");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifyUserId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("UserId");

                    b.ToTable("Medical", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Accreditation = "123456",
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6804),
                            CreatedUserId = 1L,
                            Email = "medical@sistemas.com",
                            Enable = true,
                            LastAccessDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6805),
                            ModifyDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6805),
                            Name = "Medical MOCK ",
                            OfficeId = 1L,
                            SecurityKey = "",
                            TypeAccreditation = (byte)0
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.MedicalCalendar", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("AllDay")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ColorCategory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<long>("MedicalId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<bool>("PushedCalendar")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("MedicalId");

                    b.HasIndex("ModifyUserId");

                    b.HasIndex("PatientId");

                    b.ToTable("MedicalCalendar", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.MedicalFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Description");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("FileContentType")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FileContentType");

                    b.Property<byte[]>("FileData")
                        .HasColumnType("longblob")
                        .HasColumnName("FileData");

                    b.Property<string>("FileExtension")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("FileExtension");

                    b.Property<string>("FileName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FileName");

                    b.Property<string>("FilePath")
                        .HasMaxLength(2083)
                        .HasColumnType("varchar(2083)")
                        .HasColumnName("FilePath");

                    b.Property<long>("FileSizeKB")
                        .HasColumnType("bigint")
                        .HasColumnName("FileSizeKB");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<long>("MedicalId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<byte>("TypeLocationSaveFile")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("TypeLocationSaveFile");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("MedicalId");

                    b.HasIndex("ModifyUserId");

                    b.ToTable("MedicalFile", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.MedicalSpecialty", b =>
                {
                    b.Property<long>("MedicalId")
                        .HasColumnType("bigint");

                    b.Property<long>("SpecialtyId")
                        .HasColumnType("bigint");

                    b.HasKey("MedicalId", "SpecialtyId");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("MedicalSpecialty", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.Office", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.HasKey("Id");

                    b.ToTable("Office", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6896),
                            Description = "Psicólogo",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6898),
                            Description = "Psicóloga",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6899),
                            Description = "Clínico",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.Patient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AddressCep")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("AddressCity")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AddressNeighborhood")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AddressState")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AddressStreet")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Education")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Email")
                        .HasColumnOrder(3);

                    b.Property<string>("EmergencyContactName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EmergencyContactPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<long>("GenderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<byte>("MaritalStatus")
                        .HasColumnType("tinyint unsigned");

                    b.Property<long>("MedicalId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Name")
                        .HasColumnOrder(2);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Profession")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Rg")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("GenderId");

                    b.HasIndex("MedicalId");

                    b.HasIndex("ModifyUserId");

                    b.ToTable("Patient", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AddressCep = "45675-970",
                            AddressCity = "Aurelino Leal",
                            AddressNeighborhood = "Centro",
                            AddressState = "Bahia",
                            AddressStreet = "Avenida Presidente Médici 264",
                            Cpf = "947.846.605-42",
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6997),
                            CreatedUserId = 2L,
                            DateOfBirth = new DateTime(1960, 3, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Education = "Superior",
                            Email = "tiago.thales.mendes@andrade.com",
                            EmergencyContactName = "Milena Isabelly Vanessa",
                            EmergencyContactPhoneNumber = "(73) 98540-4268",
                            Enable = true,
                            GenderId = 1L,
                            LastAccessDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6997),
                            MaritalStatus = (byte)0,
                            MedicalId = 1L,
                            ModifyDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(6998),
                            Name = "Tiago Thales Mendes",
                            PhoneNumber = "(73) 2877-3408",
                            Profession = "Professor",
                            Rg = "13.809.283-7"
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.PatientAdditionalInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("FollowUp_Neurological")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("FollowUp_Psychiatric")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifyUserId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientAdditionalInformation", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.PatientFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Description");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("FileContentType")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FileContentType");

                    b.Property<byte[]>("FileData")
                        .HasColumnType("longblob")
                        .HasColumnName("FileData");

                    b.Property<string>("FileExtension")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("FileExtension");

                    b.Property<string>("FileName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FileName");

                    b.Property<string>("FilePath")
                        .HasMaxLength(2083)
                        .HasColumnType("varchar(2083)")
                        .HasColumnName("FilePath");

                    b.Property<long>("FileSizeKB")
                        .HasColumnType("bigint")
                        .HasColumnName("FileSizeKB");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<byte>("TypeLocationSaveFile")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("TypeLocationSaveFile");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifyUserId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientFile", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.PatientHospitalizationInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CID")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Observation")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifyUserId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientHospitalizationInformation", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.PatientInfoTag", b =>
                {
                    b.Property<long>("InfoTagId")
                        .HasColumnType("bigint");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.HasKey("InfoTagId", "PatientId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientInfoTag", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.PatientMedicationInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<string>("MainDrug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<string>("Posology")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifyUserId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientMedicationInformation", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.PatientNotificationMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsReaded")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<string>("MessagePatient")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Notified")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("NotifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ReadingDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifyUserId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientNotificationMessage", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.PatientRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Annotation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("AnnotationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifyUserId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientRecord", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.RoleGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<string>("RolePolicyClaimCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.HasKey("Id");

                    b.ToTable("RoleGroup", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(7111),
                            Description = "Administrador",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RolePolicyClaimCode = "Admin"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(7113),
                            Description = "Medico",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RolePolicyClaimCode = "Medical"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(7114),
                            Description = "Recepcionista",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RolePolicyClaimCode = "Staff"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(7116),
                            Description = "Paciente",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RolePolicyClaimCode = "Patient"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(7117),
                            Description = "Leitura",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RolePolicyClaimCode = "Read"
                        },
                        new
                        {
                            Id = 6L,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(7118),
                            Description = "Escrita",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RolePolicyClaimCode = "Write"
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.RoleGroupUser", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleGroupId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleGroupId");

                    b.HasIndex("RoleGroupId");

                    b.ToTable("RoleGroupUser", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.Specialty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.HasKey("Id");

                    b.ToTable("Specialty", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(7225),
                            Description = "Psicologia Clínica",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(7227),
                            Description = "Psicologia Social",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(7228),
                            Description = "Psicologia educacional",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4L,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(7229),
                            Description = "Psicologia Esportiva ",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5L,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(7230),
                            Description = "Psicologia organizacional",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6L,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(7232),
                            Description = "Psicologia hospitalar",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7L,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(7233),
                            Description = "Psicologia do trânsito",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Admin")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Email")
                        .HasColumnOrder(3);

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.Property<long?>("MedicalId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Name")
                        .HasColumnOrder(2);

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("Refresh_token_expiry_time");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("MedicalId");

                    b.ToTable("User", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Admin = true,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(7339),
                            Email = "admin@sistemas.com",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(7340),
                            Login = "admin",
                            ModifyDate = new DateTime(2024, 4, 7, 21, 58, 9, 692, DateTimeKind.Utc).AddTicks(7340),
                            Name = "User MOCK ",
                            PasswordHash = new byte[] { 91, 49, 58, 113, 111, 72, 106, 128, 245, 123, 210, 104, 16, 253, 147, 0, 206, 108, 236, 150, 11, 163, 208, 19, 242, 44, 217, 139, 163, 25, 36, 107, 238, 172, 146, 2, 145, 73, 77, 49, 74, 1, 0, 130, 22, 129, 43, 156, 190, 212, 212, 202, 14, 16, 239, 150, 72, 231, 6, 132, 67, 255, 206, 148 },
                            PasswordSalt = new byte[] { 224, 143, 128, 247, 194, 230, 89, 121, 202, 119, 55, 231, 81, 46, 240, 155, 152, 74, 168, 32, 37, 143, 100, 240, 229, 30, 232, 52, 246, 111, 228, 47, 34, 198, 117, 159, 86, 165, 243, 46, 147, 250, 169, 235, 84, 221, 231, 181, 227, 61, 8, 238, 61, 9, 90, 137, 148, 51, 9, 234, 202, 237, 117, 55, 220, 221, 139, 77, 135, 71, 89, 38, 50, 38, 225, 90, 59, 207, 116, 155, 194, 105, 246, 241, 109, 121, 202, 193, 57, 147, 100, 138, 75, 58, 16, 33, 146, 0, 83, 138, 43, 71, 226, 82, 245, 233, 249, 25, 11, 246, 167, 163, 104, 201, 202, 30, 175, 219, 237, 235, 26, 222, 107, 203, 37, 148, 55, 35 },
                            RefreshToken = "",
                            Role = "Admin",
                            TimeZone = "E. South America Standard Time"
                        },
                        new
                        {
                            Id = 2L,
                            Admin = false,
                            CreatedDate = new DateTime(2024, 4, 7, 21, 58, 9, 694, DateTimeKind.Utc).AddTicks(8356),
                            Email = "doctor@sistemas.com",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(2024, 4, 7, 21, 58, 9, 694, DateTimeKind.Utc).AddTicks(8357),
                            Login = "doctor",
                            MedicalId = 1L,
                            ModifyDate = new DateTime(2024, 4, 7, 21, 58, 9, 694, DateTimeKind.Utc).AddTicks(8358),
                            Name = "User Medical",
                            PasswordHash = new byte[] { 104, 94, 194, 218, 182, 175, 36, 59, 99, 247, 229, 170, 92, 250, 218, 138, 87, 119, 133, 163, 87, 49, 195, 19, 152, 184, 181, 251, 50, 124, 186, 182, 186, 138, 54, 85, 13, 138, 196, 39, 63, 67, 204, 212, 52, 161, 59, 162, 218, 216, 169, 249, 30, 89, 122, 24, 4, 170, 206, 156, 6, 127, 0, 20 },
                            PasswordSalt = new byte[] { 54, 46, 182, 3, 211, 120, 69, 73, 183, 122, 158, 27, 222, 13, 33, 44, 27, 159, 239, 19, 6, 145, 189, 171, 221, 53, 110, 0, 207, 159, 13, 245, 93, 252, 142, 72, 74, 75, 87, 160, 253, 234, 85, 135, 189, 117, 234, 79, 99, 36, 111, 174, 31, 245, 94, 228, 108, 201, 146, 187, 103, 111, 71, 203, 169, 173, 135, 17, 102, 188, 255, 18, 78, 214, 116, 98, 245, 66, 188, 127, 221, 191, 18, 91, 196, 109, 130, 145, 235, 119, 251, 177, 177, 15, 223, 241, 189, 218, 58, 1, 225, 78, 118, 113, 71, 107, 42, 47, 175, 244, 125, 238, 115, 154, 243, 112, 30, 99, 77, 61, 134, 211, 141, 194, 56, 197, 124, 48 },
                            RefreshToken = "",
                            Role = "Medical",
                            TimeZone = "E. South America Standard Time"
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.InfoTag", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Medical", "Medical")
                        .WithMany()
                        .HasForeignKey("MedicalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserId");

                    b.Navigation("CreatedUser");

                    b.Navigation("Medical");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.Medical", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "CreatedUser")
                        .WithMany("MedicalsCreateds")
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "ModifyUser")
                        .WithMany("MedicalModifies")
                        .HasForeignKey("ModifyUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Office", "Office")
                        .WithMany("Medicals")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "User")
                        .WithMany("MedicalsUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifyUser");

                    b.Navigation("Office");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.MedicalCalendar", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Medical", "Medical")
                        .WithMany()
                        .HasForeignKey("MedicalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.Navigation("CreatedUser");

                    b.Navigation("Medical");

                    b.Navigation("ModifyUser");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.MedicalFile", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Medical", "Medical")
                        .WithMany()
                        .HasForeignKey("MedicalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserId");

                    b.Navigation("CreatedUser");

                    b.Navigation("Medical");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.MedicalSpecialty", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Medical", "Medical")
                        .WithMany("MedicalSpecialties")
                        .HasForeignKey("MedicalId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Specialty", "Specialty")
                        .WithMany("MedicalSpecialties")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Medical");

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.Patient", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Gender", "Gender")
                        .WithMany("Patients")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Medical", "Medical")
                        .WithMany("Patienties")
                        .HasForeignKey("MedicalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserId");

                    b.Navigation("CreatedUser");

                    b.Navigation("Gender");

                    b.Navigation("Medical");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.PatientAdditionalInformation", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Patient", "Patient")
                        .WithMany("PatientAdditionalInformations")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifyUser");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.PatientFile", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifyUser");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.PatientHospitalizationInformation", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Patient", "Patient")
                        .WithMany("PatientHospitalizationInformations")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifyUser");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.PatientInfoTag", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.InfoTag", "InfoTag")
                        .WithMany("PatientInfoTags")
                        .HasForeignKey("InfoTagId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Patient", "Patient")
                        .WithMany("PatientInfoTags")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("InfoTag");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.PatientMedicationInformation", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Patient", "Patient")
                        .WithMany("PatientMedicationInformations")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifyUser");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.PatientNotificationMessage", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifyUser");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.PatientRecord", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Patient", "Patient")
                        .WithMany("PatientRecords")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifyUser");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.RoleGroupUser", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.RoleGroup", "RoleGroup")
                        .WithMany("UserRoleGroups")
                        .HasForeignKey("RoleGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "User")
                        .WithMany("UserRoleGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("RoleGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.User", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Medical", "Medical")
                        .WithMany()
                        .HasForeignKey("MedicalId");

                    b.Navigation("Medical");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.Gender", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.InfoTag", b =>
                {
                    b.Navigation("PatientInfoTags");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.Medical", b =>
                {
                    b.Navigation("MedicalSpecialties");

                    b.Navigation("Patienties");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.Office", b =>
                {
                    b.Navigation("Medicals");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.Patient", b =>
                {
                    b.Navigation("PatientAdditionalInformations");

                    b.Navigation("PatientHospitalizationInformations");

                    b.Navigation("PatientInfoTags");

                    b.Navigation("PatientMedicationInformations");

                    b.Navigation("PatientRecords");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.RoleGroup", b =>
                {
                    b.Navigation("UserRoleGroups");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.Specialty", b =>
                {
                    b.Navigation("MedicalSpecialties");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.User", b =>
                {
                    b.Navigation("MedicalModifies");

                    b.Navigation("MedicalsCreateds");

                    b.Navigation("MedicalsUsers");

                    b.Navigation("UserRoleGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
