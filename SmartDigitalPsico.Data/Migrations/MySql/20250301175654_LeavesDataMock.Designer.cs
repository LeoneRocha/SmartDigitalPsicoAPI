// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartDigitalPsico.Data.Context;

#nullable disable

namespace SmartDigitalPsico.Data.Migrations.MySql
{
    [DbContext(typeof(SmartDigitalPsicoDataContextMySql))]
    [Migration("20250301175654_LeavesDataMock")]
    partial class LeavesDataMock
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.ApplicationCacheLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CacheId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CacheKey")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime>("DateTimeSlidingExpiration")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.HasKey("Id");

                    b.ToTable("ApplicationCacheLog", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.ApplicationConfigSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("EndPointUrl_Cache")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EndPointUrl_StorageFiles")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<byte>("TypeLocationCache")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte>("TypeLocationQueeMessaging")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte>("TypeLocationSaveFiles")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("UrlRootManager")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationConfigSetting", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 586, DateTimeKind.Utc).AddTicks(7694),
                            Description = "Default",
                            Enable = true,
                            EndPointUrl_Cache = "",
                            EndPointUrl_StorageFiles = "",
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(2025, 3, 1, 17, 56, 53, 586, DateTimeKind.Utc).AddTicks(7698),
                            ModifyDate = new DateTime(2025, 3, 1, 17, 56, 53, 586, DateTimeKind.Utc).AddTicks(7697),
                            TypeLocationCache = (byte)1,
                            TypeLocationQueeMessaging = (byte)0,
                            TypeLocationSaveFiles = (byte)0,
                            UrlRootManager = "https://smartdigitalpsicoui-staging.azurewebsites.net/"
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.ApplicationLanguage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<string>("LanguageKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LanguageValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<string>("ResourceKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ResourceKey", "Language", "LanguageKey")
                        .IsUnique()
                        .HasDatabaseName("Idx_ApplicationLanguage_ResourceKey_Language_LanguageKey_Unique");

                    b.ToTable("ApplicationLanguage", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3379),
                            Description = "Registro atualizado",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "RegisterUpdated",
                            LanguageValue = "Registro atualizado",
                            LastAccessDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3380),
                            ModifyDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3380),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3382),
                            Description = "Default",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "Default_ptbr",
                            LanguageValue = "Padrão",
                            LastAccessDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3383),
                            ModifyDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3382),
                            ResourceKey = "ApplicationLanguage"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3384),
                            Description = "Registro encontrado",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "RegisterIsFound",
                            LanguageValue = "Registro encontrado",
                            LastAccessDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3385),
                            ModifyDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3385),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3386),
                            Description = "Registro não encontrado",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "RegisterIsNotFound",
                            LanguageValue = "Registro não encontrado",
                            LastAccessDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3387),
                            ModifyDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3387),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3388),
                            Description = "Registro existe",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "RegisterExist",
                            LanguageValue = "Registro existe",
                            LastAccessDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3389),
                            ModifyDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3389),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 6L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3390),
                            Description = "Registro deletado",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "RegisterDeleted",
                            LanguageValue = "Registro deletado",
                            LastAccessDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3391),
                            ModifyDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3391),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 7L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3392),
                            Description = "Registro localizado",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "RegisterFind",
                            LanguageValue = "Registro localizado",
                            LastAccessDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3393),
                            ModifyDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3393),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 8L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3394),
                            Description = "Registros contabilizados",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "RegisterCounted",
                            LanguageValue = "Registros contabilizados",
                            LastAccessDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3395),
                            ModifyDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3395),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 9L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3396),
                            Description = "Registro criado",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "RegisterCreated",
                            LanguageValue = "Registro criado",
                            LastAccessDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3397),
                            ModifyDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3397),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 10L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3398),
                            Description = "A descrição não pode ser vazia",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Description_Null",
                            LanguageValue = "A descrição não pode ser vazia",
                            LastAccessDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3399),
                            ModifyDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3399),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 11L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3400),
                            Description = "O idoma não pode ser vazio",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Language_Null",
                            LanguageValue = "O idoma não pode ser vazio",
                            LastAccessDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3401),
                            ModifyDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3400),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 12L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3402),
                            Description = "O idoma não pode ultrapassar {MaxLength}",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Language_MaximumLength",
                            LanguageValue = "O idoma não pode ultrapassar {MaxLength}",
                            LastAccessDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3403),
                            ModifyDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3402),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 13L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3404),
                            Description = "Válido",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "LangValid",
                            LanguageValue = "Válido",
                            LastAccessDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3405),
                            ModifyDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3404),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 14L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3406),
                            Description = "Ocorreram erros!",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "LangErrors",
                            LanguageValue = "Ocorreram erros!",
                            LastAccessDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3407),
                            ModifyDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3406),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 15L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3408),
                            Description = "O medico deve ser informado.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_MedicalId_Null",
                            LanguageValue = "O medico deve ser informado.",
                            LastAccessDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3409),
                            ModifyDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3408),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 16L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3410),
                            Description = "O medico informado não existe.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_MedicalId_NotFound",
                            LanguageValue = "O medico informado não existe.",
                            LastAccessDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3410),
                            ModifyDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3410),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 17L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3412),
                            Description = "O medico infomado deve ser o mesmo logado. Medicos",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Medical_Changed",
                            LanguageValue = "O medico infomado deve ser o mesmo logado. Medicos nao podem criar arquivos de outro medico.",
                            LastAccessDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3412),
                            ModifyDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3412),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 18L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3414),
                            Description = "O nome não pode ser vazio",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Name_Null",
                            LanguageValue = "O nome não pode ser vazio",
                            LastAccessDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3414),
                            ModifyDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3414),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 19L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3415),
                            Description = "O Login não pode ser vazio.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Login_Null",
                            LanguageValue = "O Login não pode ser vazio.",
                            LastAccessDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3416),
                            ModifyDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3416),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 20L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3417),
                            Description = "Login deve ser unico.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Login_Unique",
                            LanguageValue = "Login deve ser unico.",
                            LastAccessDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3418),
                            ModifyDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3418),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 21L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3419),
                            Description = "O Email não pode ser vazio",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Email_Null",
                            LanguageValue = "O Email não pode ser vazio",
                            LastAccessDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3420),
                            ModifyDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3420),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 22L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3421),
                            Description = "O Email é invalido.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Email_Invalid",
                            LanguageValue = "O Email é invalido.",
                            LastAccessDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3422),
                            ModifyDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3422),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 23L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3423),
                            Description = "O Email deve ser unico.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Email_Unique",
                            LanguageValue = "O Email deve ser unico.",
                            LastAccessDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3424),
                            ModifyDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3424),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 24L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3425),
                            Description = "O Credenciamento não pode ser vazio.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Accreditation_Null",
                            LanguageValue = "O Credenciamento não pode ser vazio.",
                            LastAccessDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3426),
                            ModifyDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3426),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 25L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3427),
                            Description = "O Credenciamento deve ser unico.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Accreditation_Unique",
                            LanguageValue = "O Credenciamento deve ser unico.",
                            LastAccessDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3428),
                            ModifyDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3428),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 26L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3429),
                            Description = "O medico infomado deve ser o mesmo logado. Medicos",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_MedicalCreated_Invalid",
                            LanguageValue = "O medico infomado deve ser o mesmo logado. Medicos nao podem criar arquivos de outro medico.",
                            LastAccessDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3430),
                            ModifyDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3429),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 27L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3431),
                            Description = "O medico infomado deve ser o mesmo logado. Medicos",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_MedicalModify_Invalid",
                            LanguageValue = "O medico infomado deve ser o mesmo logado. Medicos nao podem modificar arquivos de outro medico.",
                            LastAccessDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3432),
                            ModifyDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3431),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 28L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3433),
                            Description = "O Paciente deve ser informado.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Patient_Null",
                            LanguageValue = "O Paciente deve ser informado.",
                            LastAccessDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3434),
                            ModifyDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3433),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 29L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3435),
                            Description = "O Paciente informado não existe.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Patient_NotFound",
                            LanguageValue = "O Paciente informado não existe.",
                            LastAccessDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3436),
                            ModifyDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3435),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 30L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3437),
                            Description = "O Paciente não pode ser alterado.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Patient_Changed",
                            LanguageValue = "O Paciente não pode ser alterado.",
                            LastAccessDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3438),
                            ModifyDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3437),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 31L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3439),
                            Description = "Informações do paciente não podem ser adicionadas ",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Patient_Medical_Created",
                            LanguageValue = "Informações do paciente não podem ser adicionadas por outro medico e/ou usuario.",
                            LastAccessDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3439),
                            ModifyDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3439),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 32L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3441),
                            Description = "Informações do paciente não podem ser modificadas ",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Patient_Medical_Modify",
                            LanguageValue = "Informações do paciente não podem ser modificadas por outro medico e/ou usuario.",
                            LastAccessDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3441),
                            ModifyDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3441),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 33L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3443),
                            Description = "O Usuário que está criando deve ser informado.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_CreatedUserId_Null",
                            LanguageValue = "O Usuário que está criando deve ser informado.",
                            LastAccessDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3443),
                            ModifyDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3443),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 34L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3444),
                            Description = "A anotação não pode ser vazia.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Annotation_Null",
                            LanguageValue = "A anotação não pode ser vazia.",
                            LastAccessDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3445),
                            ModifyDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3445),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 35L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3446),
                            Description = "A data da anotação não pode ser vazia.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_AnnotationDate_Null",
                            LanguageValue = "A data da anotação não pode ser vazia.",
                            LastAccessDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3447),
                            ModifyDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3447),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 36L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3448),
                            Description = "Data de nascimento invalido",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_DateOfBirth_Invalid",
                            LanguageValue = "Data de nascimento invalido",
                            LastAccessDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3449),
                            ModifyDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3449),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 37L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3450),
                            Description = "O Rg não pode ser vazio.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_RG_Null",
                            LanguageValue = "O Rg não pode ser vazio.",
                            LastAccessDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3451),
                            ModifyDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3451),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 38L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3452),
                            Description = "O CPF não pode ser vazio.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_CPF_Null",
                            LanguageValue = "O CPF não pode ser vazio.",
                            LastAccessDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3453),
                            ModifyDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3452),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 39L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3454),
                            Description = "Ocorreu erro no processo.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "GenericErroMessage",
                            LanguageValue = "Ocorreu erro no processo.",
                            LastAccessDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3455),
                            ModifyDate = new DateTime(2025, 3, 1, 17, 56, 53, 587, DateTimeKind.Utc).AddTicks(3454),
                            ResourceKey = "SharedResource"
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.AuditDataEntityLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("AuditDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("KeyValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<string>("NewValues")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .HasColumnType("text");

                    b.Property<string>("OldValues")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .HasColumnType("text");

                    b.Property<string>("Operation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<long?>("UserAuditedId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserAuditedLogin")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserAuditedId");

                    b.HasIndex("TableName", "Operation")
                        .HasDatabaseName("Idx_TableName_Operation_Inc_AuditDate_UserAuditedId")
                        .HasAnnotation("SqlServer:Include", new[] { "AuditDate", "UserAuditedId" });

                    b.HasIndex("TableName", "Operation", "AuditDate", "UserAuditedId")
                        .HasDatabaseName("Idx_TableName_Operation_AuditDate_UserAuditedId");

                    b.ToTable("AuditDataEntityLog", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.AuditDataSelectiveEntityLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("AuditDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("KeyValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<string>("NewValues")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .HasColumnType("text");

                    b.Property<string>("OldValues")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .HasColumnType("text");

                    b.Property<string>("Operation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PartitionKey")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("RowKey")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<long?>("UserAuditedId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserAuditedLogin")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserAuditedId");

                    b.HasIndex("TableName", "Operation")
                        .HasDatabaseName("Idx_TableName_Operation_Inc_AuditDate_UserAuditedId")
                        .HasAnnotation("SqlServer:Include", new[] { "AuditDate", "UserAuditedId" });

                    b.HasIndex("TableName", "Operation", "AuditDate", "UserAuditedId")
                        .HasDatabaseName("Idx_TableName_Operation_AuditDate_UserAuditedId");

                    b.ToTable("AuditDataSelectiveEntityLog", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.EmailTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("TagApi")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Language")
                        .HasDatabaseName("IX_EmailTemplate_Language");

                    b.HasIndex("TagApi")
                        .HasDatabaseName("IX_EmailTemplate_TagApi");

                    b.HasIndex("Language", "TagApi", "Enable")
                        .HasDatabaseName("IX_EmailTemplate_Language_TagApi_Enable");

                    b.ToTable("EmailTemplate", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Body = "<html>\r\n<head>\r\n    <style>\r\n        body {{ font-family: Arial, sans-serif; background-color: #f4f4f9; color: #333; padding: 20px; }}\r\n        .container {{ max-width: 600px; margin: 0 auto; background-color: #fff; padding: 20px; border-radius: 10px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); }}\r\n        .header {{ text-align: center; padding-bottom: 20px; }}\r\n        .header h1 {{ margin: 0; color: #4CAF50; }}\r\n        .content {{ line-height: 1.6; }}\r\n        .footer {{ text-align: center; padding-top: 20px; font-size: 0.9em; color: #777; }}\r\n    </style>\r\n</head>\r\n<body>\r\n    <div class='container'>\r\n        <div class='header'>\r\n            <h1>Access Granted</h1>\r\n        </div>\r\n        <div class='content'>\r\n            <p>Hello,</p>\r\n            <p>Your access has been granted. Below are your login details:</p>\r\n            <p><strong>URL:</strong> <a href='[{AccessUrl}]'>[{AccessUrl}]</a></p>\r\n            <p><strong>Email:</strong> [{Email}]</p>\r\n            <p><strong>Temporary Password:</strong> [{Password}]</p>\r\n            <p>Please change your password after your first login.</p>\r\n        </div>\r\n        <div class='footer'>\r\n            <p>Thank you for joining us!</p>\r\n        </div>\r\n    </div>\r\n</body>\r\n</html>",
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 588, DateTimeKind.Utc).AddTicks(5405),
                            Description = "Welcome Email",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(2025, 3, 1, 17, 56, 53, 588, DateTimeKind.Utc).AddTicks(5407),
                            ModifyDate = new DateTime(2025, 3, 1, 17, 56, 53, 588, DateTimeKind.Utc).AddTicks(5406),
                            Subject = "Access Granted",
                            TagApi = ""
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.Gender", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.HasKey("Id");

                    b.ToTable("Gender", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 588, DateTimeKind.Utc).AddTicks(7222),
                            Description = "Masculino",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 588, DateTimeKind.Utc).AddTicks(7224),
                            Description = "Feminino",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.InfoTag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<long>("MedicalId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("MedicalId");

                    b.HasIndex("ModifyUserId");

                    b.ToTable("InfoTag", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.Leaves", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<long?>("MedicalId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("MedicalId")
                        .HasDatabaseName("IX_Leaves_MedicalId");

                    b.HasIndex("StartDate", "EndDate")
                        .HasDatabaseName("IX_Leaves_StartDate_EndDate");

                    b.ToTable("Leaves", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 593, DateTimeKind.Utc).AddTicks(9399),
                            Description = "Ano Novo",
                            Enable = true,
                            IsRecurring = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 593, DateTimeKind.Utc).AddTicks(9410),
                            Description = "Carnaval",
                            Enable = true,
                            IsRecurring = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 2, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 593, DateTimeKind.Utc).AddTicks(9436),
                            Description = "Sexta-feira Santa",
                            Enable = true,
                            IsRecurring = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 4, 18, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 593, DateTimeKind.Utc).AddTicks(9438),
                            Description = "Tiradentes",
                            Enable = true,
                            IsRecurring = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 4, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 593, DateTimeKind.Utc).AddTicks(9440),
                            Description = "Dia do Trabalho",
                            Enable = true,
                            IsRecurring = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 593, DateTimeKind.Utc).AddTicks(9441),
                            Description = "Corpus Christi",
                            Enable = true,
                            IsRecurring = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 6, 19, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 593, DateTimeKind.Utc).AddTicks(9443),
                            Description = "Independência do Brasil",
                            Enable = true,
                            IsRecurring = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 9, 7, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 593, DateTimeKind.Utc).AddTicks(9444),
                            Description = "Nossa Senhora Aparecida",
                            Enable = true,
                            IsRecurring = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 593, DateTimeKind.Utc).AddTicks(9445),
                            Description = "Finados",
                            Enable = true,
                            IsRecurring = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 11, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 593, DateTimeKind.Utc).AddTicks(9447),
                            Description = "Proclamação da República",
                            Enable = true,
                            IsRecurring = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 593, DateTimeKind.Utc).AddTicks(9448),
                            Description = "Natal",
                            Enable = true,
                            IsRecurring = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.Medical", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Accreditation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Email")
                        .HasColumnOrder(3);

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<TimeSpan>("EndWorkingTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Name")
                        .HasColumnOrder(2);

                    b.Property<long>("OfficeId")
                        .HasColumnType("bigint");

                    b.Property<byte>("PatientIntervalTimeMinutes")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("SecurityKey")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<TimeSpan>("StartWorkingTime")
                        .HasColumnType("time");

                    b.Property<byte>("TypeAccreditation")
                        .HasColumnType("tinyint unsigned");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("WorkingDays")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifyUserId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("UserId");

                    b.ToTable("Medical", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Accreditation = "123456",
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 600, DateTimeKind.Utc).AddTicks(8099),
                            CreatedUserId = 1L,
                            Email = "medical@sistemas.com",
                            Enable = true,
                            EndWorkingTime = new TimeSpan(0, 20, 0, 0, 0),
                            LastAccessDate = new DateTime(2025, 3, 1, 17, 56, 53, 600, DateTimeKind.Utc).AddTicks(8101),
                            ModifyDate = new DateTime(2025, 3, 1, 17, 56, 53, 600, DateTimeKind.Utc).AddTicks(8101),
                            Name = "Medical MOCK ",
                            OfficeId = 1L,
                            PatientIntervalTimeMinutes = (byte)0,
                            SecurityKey = "",
                            StartWorkingTime = new TimeSpan(0, 6, 0, 0, 0),
                            TypeAccreditation = (byte)0,
                            WorkingDays = "1,2,3,4,5,6"
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.MedicalCalendar", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ColorCategoryHexa")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("text");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsAllDay")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPushedCalendar")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<long>("MedicalId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<string>("ReasonCancellation")
                        .HasMaxLength(1000)
                        .HasColumnType("text");

                    b.Property<short?>("RecurrenceCount")
                        .HasColumnType("smallint");

                    b.Property<string>("RecurrenceDays")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("RecurrenceEndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<byte>("RecurrenceType")
                        .HasColumnType("tinyint unsigned");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TokenRecurrence")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("MedicalId");

                    b.HasIndex("ModifyUserId");

                    b.HasIndex("PatientId");

                    b.HasIndex("TokenRecurrence")
                        .HasDatabaseName("Idx_TokenRecurrence_Inc_PatientId_MedicalId_StartDateTime_EndDateTime_TokenRecurrence")
                        .HasAnnotation("SqlServer:Include", new[] { "PatientId", "MedicalId", "StartDateTime", "EndDateTime" });

                    b.HasIndex("TokenRecurrence", "PatientId", "MedicalId", "StartDateTime", "EndDateTime")
                        .HasDatabaseName("Idx_TokenRecurrence_PatientId_MedicalId_StartDateTime_EndDateTime_TokenRecurrence");

                    b.ToTable("MedicalCalendar", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.MedicalFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Description");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("FileBlobName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FileBlobName");

                    b.Property<string>("FileCloudContainer")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("FileCloudContainer");

                    b.Property<string>("FileContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FileContentType");

                    b.Property<byte[]>("FileData")
                        .IsRequired()
                        .HasColumnType("longblob")
                        .HasColumnName("FileData");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("FileExtension");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FileName");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(2083)
                        .HasColumnType("varchar(2083)")
                        .HasColumnName("FilePath");

                    b.Property<long>("FileSizeKB")
                        .HasColumnType("bigint")
                        .HasColumnName("FileSizeKB");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<long>("MedicalId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<byte>("TypeLocationSaveFile")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("TypeLocationSaveFile");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("MedicalId");

                    b.HasIndex("ModifyUserId");

                    b.ToTable("MedicalFile", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.MedicalSettings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("GoogleAccessToken")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("GoogleCalendarId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("GoogleRefreshToken")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("GoogleTokenExpiry")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<long>("MedicalId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MedicalId1")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.HasKey("Id");

                    b.HasIndex("MedicalId");

                    b.HasIndex("MedicalId1");

                    b.ToTable("MedicalSettings", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.MedicalSpecialty", b =>
                {
                    b.Property<long>("MedicalId")
                        .HasColumnType("bigint");

                    b.Property<long>("SpecialtyId")
                        .HasColumnType("bigint");

                    b.HasKey("MedicalId", "SpecialtyId");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("MedicalSpecialty", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");

                    b.HasData(
                        new
                        {
                            MedicalId = 1L,
                            SpecialtyId = 1L
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.NotificationRecords", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("FinalSendDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<long?>("MedicalCalendarId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<DateTime?>("NextScheduledSendTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NotificationRules")
                        .IsRequired()
                        .HasMaxLength(65535)
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IsCompleted")
                        .HasDatabaseName("IX_NotificationRecords_IsCompleted");

                    b.HasIndex("MedicalCalendarId")
                        .HasDatabaseName("IX_NotificationRecords_MedicalCalendarId");

                    b.HasIndex("NextScheduledSendTime")
                        .HasDatabaseName("IX_NotificationRecords_NextScheduledSendTime");

                    b.ToTable("NotificationRecords", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.NotificationRules", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ENotificationServiceType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<short>("IntervalType")
                        .HasColumnType("smallint");

                    b.Property<short>("IntervalValue")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsBefore")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<long>("MedicalId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.HasKey("Id");

                    b.HasIndex("MedicalId")
                        .HasDatabaseName("IX_NotificationRules_MedicalId");

                    b.ToTable("NotificationRules", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.Office", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.HasKey("Id");

                    b.ToTable("Office", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 609, DateTimeKind.Utc).AddTicks(598),
                            Description = "Psicólogo",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 609, DateTimeKind.Utc).AddTicks(600),
                            Description = "Psicóloga",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 609, DateTimeKind.Utc).AddTicks(602),
                            Description = "Clínico",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.Patient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AddressCep")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("AddressCity")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AddressNeighborhood")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AddressState")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AddressStreet")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Education")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Email")
                        .HasColumnOrder(3);

                    b.Property<string>("EmergencyContactName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EmergencyContactPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<long>("GenderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<byte>("MaritalStatus")
                        .HasColumnType("tinyint unsigned");

                    b.Property<long>("MedicalId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Name")
                        .HasColumnOrder(2);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Profession")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Rg")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("GenderId");

                    b.HasIndex("MedicalId");

                    b.HasIndex("ModifyUserId");

                    b.ToTable("Patient", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AddressCep = "45675-970",
                            AddressCity = "Aurelino Leal",
                            AddressNeighborhood = "Centro",
                            AddressState = "Bahia",
                            AddressStreet = "Avenida Presidente Médici 264",
                            Cpf = "947.846.605-42",
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 612, DateTimeKind.Utc).AddTicks(6473),
                            CreatedUserId = 2L,
                            DateOfBirth = new DateTime(1960, 3, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Education = "Superior",
                            Email = "tiago.thales.mendes@andrade.com",
                            EmergencyContactName = "Milena Isabelly Vanessa",
                            EmergencyContactPhoneNumber = "(73) 98540-4268",
                            Enable = true,
                            GenderId = 1L,
                            LastAccessDate = new DateTime(2025, 3, 1, 17, 56, 53, 612, DateTimeKind.Utc).AddTicks(6474),
                            MaritalStatus = (byte)0,
                            MedicalId = 1L,
                            ModifyDate = new DateTime(2025, 3, 1, 17, 56, 53, 612, DateTimeKind.Utc).AddTicks(6474),
                            Name = "Tiago Thales Mendes",
                            PhoneNumber = "(73) 2877-3408",
                            Profession = "Professor",
                            Rg = "13.809.283-7"
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.PatientAdditionalInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("FollowUp_Neurological")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("FollowUp_Psychiatric")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifyUserId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientAdditionalInformation", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.PatientFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Description");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("FileBlobName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FileBlobName");

                    b.Property<string>("FileCloudContainer")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("FileCloudContainer");

                    b.Property<string>("FileContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FileContentType");

                    b.Property<byte[]>("FileData")
                        .IsRequired()
                        .HasColumnType("longblob")
                        .HasColumnName("FileData");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("FileExtension");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FileName");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(2083)
                        .HasColumnType("varchar(2083)")
                        .HasColumnName("FilePath");

                    b.Property<long>("FileSizeKB")
                        .HasColumnType("bigint")
                        .HasColumnName("FileSizeKB");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<byte>("TypeLocationSaveFile")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("TypeLocationSaveFile");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifyUserId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientFile", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.PatientHospitalizationInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CID")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Observation")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifyUserId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientHospitalizationInformation", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.PatientInfoTag", b =>
                {
                    b.Property<long>("InfoTagId")
                        .HasColumnType("bigint");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.HasKey("InfoTagId", "PatientId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientInfoTag", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.PatientMedicationInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<string>("MainDrug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<string>("Posology")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifyUserId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientMedicationInformation", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.PatientNotificationMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsReaded")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<string>("MessagePatient")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Notified")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("NotifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ReadingDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifyUserId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientNotificationMessage", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.PatientRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Annotation")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("text");

                    b.Property<DateTime>("AnnotationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<string>("TableStorageRowKey")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifyUserId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientRecord", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.RoleGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<string>("RolePolicyClaimCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.HasKey("Id");

                    b.ToTable("RoleGroup", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 615, DateTimeKind.Utc).AddTicks(9119),
                            Description = "Administrador",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RolePolicyClaimCode = "Admin"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 615, DateTimeKind.Utc).AddTicks(9121),
                            Description = "Medico",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RolePolicyClaimCode = "Medical"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 615, DateTimeKind.Utc).AddTicks(9123),
                            Description = "Recepcionista",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RolePolicyClaimCode = "Staff"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 615, DateTimeKind.Utc).AddTicks(9124),
                            Description = "Paciente",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RolePolicyClaimCode = "Patient"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 615, DateTimeKind.Utc).AddTicks(9125),
                            Description = "Leitura",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RolePolicyClaimCode = "Read"
                        },
                        new
                        {
                            Id = 6L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 615, DateTimeKind.Utc).AddTicks(9126),
                            Description = "Escrita",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RolePolicyClaimCode = "Write"
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.RoleGroupUser", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleGroupId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleGroupId");

                    b.HasIndex("RoleGroupId");

                    b.ToTable("RoleGroupUser", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");

                    b.HasData(
                        new
                        {
                            UserId = 1L,
                            RoleGroupId = 1L
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.Specialty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.HasKey("Id");

                    b.ToTable("Specialty", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 616, DateTimeKind.Utc).AddTicks(5864),
                            Description = "Psicologia Clínica",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 616, DateTimeKind.Utc).AddTicks(5866),
                            Description = "Psicologia Social",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 616, DateTimeKind.Utc).AddTicks(5867),
                            Description = "Psicologia educacional",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 616, DateTimeKind.Utc).AddTicks(5869),
                            Description = "Psicologia Esportiva ",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 616, DateTimeKind.Utc).AddTicks(5870),
                            Description = "Psicologia organizacional",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 616, DateTimeKind.Utc).AddTicks(5871),
                            Description = "Psicologia hospitalar",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7L,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 616, DateTimeKind.Utc).AddTicks(5872),
                            Description = "Psicologia do trânsito",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Admin")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Email")
                        .HasColumnOrder(3);

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.Property<long?>("MedicalId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Name")
                        .HasColumnOrder(2);

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("Refresh_token_expiry_time");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("MedicalId");

                    b.ToTable("User", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Admin = true,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 617, DateTimeKind.Utc).AddTicks(1521),
                            Email = "admin@sistemas.com",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(2025, 3, 1, 17, 56, 53, 617, DateTimeKind.Utc).AddTicks(1522),
                            Login = "admin",
                            ModifyDate = new DateTime(2025, 3, 1, 17, 56, 53, 617, DateTimeKind.Utc).AddTicks(1522),
                            Name = "User MOCK ",
                            PasswordHash = new byte[] { 129, 195, 251, 218, 175, 211, 27, 149, 139, 185, 183, 31, 65, 144, 93, 156, 151, 180, 45, 175, 66, 35, 25, 95, 161, 132, 80, 136, 55, 23, 60, 214, 150, 231, 155, 206, 194, 19, 130, 232, 62, 215, 169, 69, 25, 239, 170, 32, 253, 58, 56, 124, 35, 119, 83, 45, 170, 49, 96, 120, 86, 192, 1, 112 },
                            PasswordSalt = new byte[] { 141, 168, 54, 68, 10, 220, 16, 110, 14, 151, 28, 128, 78, 225, 31, 21, 135, 229, 24, 62, 11, 221, 25, 118, 44, 201, 28, 210, 133, 16, 65, 42, 58, 0, 4, 11, 26, 72, 184, 167, 66, 61, 127, 41, 3, 16, 76, 67, 134, 12, 9, 21, 21, 197, 82, 120, 248, 2, 183, 118, 67, 143, 105, 243, 123, 231, 201, 181, 104, 215, 81, 73, 240, 50, 246, 194, 168, 133, 116, 136, 55, 93, 54, 81, 131, 18, 41, 109, 56, 52, 170, 179, 58, 225, 85, 180, 121, 104, 65, 181, 87, 89, 68, 200, 166, 248, 105, 70, 6, 95, 125, 216, 104, 74, 83, 96, 134, 40, 156, 240, 159, 193, 189, 112, 148, 100, 108, 6 },
                            RefreshToken = "",
                            Role = "Admin",
                            TimeZone = "E. South America Standard Time"
                        },
                        new
                        {
                            Id = 2L,
                            Admin = false,
                            CreatedDate = new DateTime(2025, 3, 1, 17, 56, 53, 619, DateTimeKind.Utc).AddTicks(2678),
                            Email = "doctor@sistemas.com",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(2025, 3, 1, 17, 56, 53, 619, DateTimeKind.Utc).AddTicks(2678),
                            Login = "doctor",
                            MedicalId = 1L,
                            ModifyDate = new DateTime(2025, 3, 1, 17, 56, 53, 619, DateTimeKind.Utc).AddTicks(2679),
                            Name = "User Medical",
                            PasswordHash = new byte[] { 15, 95, 117, 206, 28, 27, 183, 1, 144, 115, 50, 202, 250, 9, 29, 102, 120, 99, 163, 214, 118, 42, 241, 34, 114, 203, 88, 85, 35, 25, 173, 16, 184, 55, 135, 241, 30, 182, 241, 228, 211, 126, 23, 113, 106, 68, 247, 122, 94, 24, 245, 136, 192, 89, 229, 175, 51, 64, 63, 81, 61, 74, 254, 74 },
                            PasswordSalt = new byte[] { 72, 169, 249, 179, 186, 88, 43, 193, 182, 236, 168, 250, 223, 181, 240, 7, 200, 69, 114, 157, 91, 66, 228, 127, 192, 190, 169, 212, 68, 194, 49, 156, 189, 200, 188, 170, 171, 121, 247, 83, 172, 152, 146, 21, 203, 193, 42, 225, 53, 236, 59, 19, 168, 131, 51, 131, 67, 148, 55, 131, 211, 82, 34, 161, 23, 95, 36, 13, 239, 222, 66, 64, 179, 229, 152, 83, 99, 29, 103, 171, 252, 211, 71, 48, 2, 69, 214, 236, 76, 74, 125, 78, 69, 53, 31, 24, 130, 235, 174, 243, 50, 240, 125, 150, 246, 232, 131, 172, 10, 165, 164, 106, 1, 142, 76, 82, 183, 202, 109, 9, 151, 99, 148, 125, 168, 243, 243, 139 },
                            RefreshToken = "",
                            Role = "Medical",
                            TimeZone = "E. South America Standard Time"
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.UserTokenSession", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("text");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("Refresh_token_expiry_time");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserTokenSession", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.AuditDataEntityLog", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "UserAudited")
                        .WithMany()
                        .HasForeignKey("UserAuditedId");

                    b.Navigation("UserAudited");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.AuditDataSelectiveEntityLog", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "UserAudited")
                        .WithMany()
                        .HasForeignKey("UserAuditedId");

                    b.Navigation("UserAudited");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.InfoTag", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Medical", "Medical")
                        .WithMany()
                        .HasForeignKey("MedicalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserId");

                    b.Navigation("CreatedUser");

                    b.Navigation("Medical");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.Leaves", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Medical", "Medical")
                        .WithMany()
                        .HasForeignKey("MedicalId");

                    b.Navigation("Medical");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.Medical", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "CreatedUser")
                        .WithMany("MedicalsCreateds")
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "ModifyUser")
                        .WithMany("MedicalModifies")
                        .HasForeignKey("ModifyUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Office", "Office")
                        .WithMany("Medicals")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "User")
                        .WithMany("MedicalsUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifyUser");

                    b.Navigation("Office");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.MedicalCalendar", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Medical", "Medical")
                        .WithMany()
                        .HasForeignKey("MedicalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.Navigation("CreatedUser");

                    b.Navigation("Medical");

                    b.Navigation("ModifyUser");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.MedicalFile", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Medical", "Medical")
                        .WithMany()
                        .HasForeignKey("MedicalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserId");

                    b.Navigation("CreatedUser");

                    b.Navigation("Medical");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.MedicalSettings", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Medical", "Medical")
                        .WithMany()
                        .HasForeignKey("MedicalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Medical", null)
                        .WithMany("MedicalSettings")
                        .HasForeignKey("MedicalId1");

                    b.Navigation("Medical");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.MedicalSpecialty", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Medical", "Medical")
                        .WithMany("MedicalSpecialties")
                        .HasForeignKey("MedicalId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Specialty", "Specialty")
                        .WithMany("MedicalSpecialties")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Medical");

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.NotificationRecords", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.MedicalCalendar", "MedicalCalendar")
                        .WithMany()
                        .HasForeignKey("MedicalCalendarId");

                    b.Navigation("MedicalCalendar");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.NotificationRules", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Medical", "Medical")
                        .WithMany()
                        .HasForeignKey("MedicalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medical");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.Patient", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Gender", "Gender")
                        .WithMany("Patients")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Medical", "Medical")
                        .WithMany("Patienties")
                        .HasForeignKey("MedicalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserId");

                    b.Navigation("CreatedUser");

                    b.Navigation("Gender");

                    b.Navigation("Medical");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.PatientAdditionalInformation", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Patient", "Patient")
                        .WithMany("PatientAdditionalInformations")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifyUser");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.PatientFile", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifyUser");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.PatientHospitalizationInformation", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Patient", "Patient")
                        .WithMany("PatientHospitalizationInformations")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifyUser");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.PatientInfoTag", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.InfoTag", "InfoTag")
                        .WithMany("PatientInfoTags")
                        .HasForeignKey("InfoTagId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Patient", "Patient")
                        .WithMany("PatientInfoTags")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("InfoTag");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.PatientMedicationInformation", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Patient", "Patient")
                        .WithMany("PatientMedicationInformations")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifyUser");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.PatientNotificationMessage", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifyUser");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.PatientRecord", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Patient", "Patient")
                        .WithMany("PatientRecords")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifyUser");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.RoleGroupUser", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.RoleGroup", "RoleGroup")
                        .WithMany("UserRoleGroups")
                        .HasForeignKey("RoleGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "User")
                        .WithMany("UserRoleGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("RoleGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.User", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Medical", "Medical")
                        .WithMany()
                        .HasForeignKey("MedicalId");

                    b.Navigation("Medical");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.UserTokenSession", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "User")
                        .WithOne("TokenSession")
                        .HasForeignKey("SmartDigitalPsico.Domain.ModelEntity.UserTokenSession", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.Gender", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.InfoTag", b =>
                {
                    b.Navigation("PatientInfoTags");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.Medical", b =>
                {
                    b.Navigation("MedicalSettings");

                    b.Navigation("MedicalSpecialties");

                    b.Navigation("Patienties");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.Office", b =>
                {
                    b.Navigation("Medicals");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.Patient", b =>
                {
                    b.Navigation("PatientAdditionalInformations");

                    b.Navigation("PatientHospitalizationInformations");

                    b.Navigation("PatientInfoTags");

                    b.Navigation("PatientMedicationInformations");

                    b.Navigation("PatientRecords");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.RoleGroup", b =>
                {
                    b.Navigation("UserRoleGroups");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.Specialty", b =>
                {
                    b.Navigation("MedicalSpecialties");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.User", b =>
                {
                    b.Navigation("MedicalModifies");

                    b.Navigation("MedicalsCreateds");

                    b.Navigation("MedicalsUsers");

                    b.Navigation("TokenSession");

                    b.Navigation("UserRoleGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
