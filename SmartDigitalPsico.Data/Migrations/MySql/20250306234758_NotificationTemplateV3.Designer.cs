// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartDigitalPsico.Data.Context;

#nullable disable

namespace SmartDigitalPsico.Data.Migrations.MySql
{
    [DbContext(typeof(SmartDigitalPsicoDataContextMySql))]
    [Migration("20250306234758_NotificationTemplateV3")]
    partial class NotificationTemplateV3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.ApplicationCacheLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CacheId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CacheKey")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime>("DateTimeSlidingExpiration")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.HasKey("Id");

                    b.ToTable("ApplicationCacheLog", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.ApplicationConfigSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("EndPointUrl_Cache")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EndPointUrl_StorageFiles")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<byte>("TypeLocationCache")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte>("TypeLocationQueeMessaging")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte>("TypeLocationSaveFiles")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("UrlRootManager")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationConfigSetting", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 701, DateTimeKind.Utc).AddTicks(8950),
                            Description = "Default",
                            Enable = true,
                            EndPointUrl_Cache = "",
                            EndPointUrl_StorageFiles = "",
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 701, DateTimeKind.Utc).AddTicks(8954),
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 701, DateTimeKind.Utc).AddTicks(8953),
                            TypeLocationCache = (byte)1,
                            TypeLocationQueeMessaging = (byte)0,
                            TypeLocationSaveFiles = (byte)0,
                            UrlRootManager = ""
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.ApplicationLanguage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<string>("LanguageKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LanguageValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<string>("ResourceKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ResourceKey", "Language", "LanguageKey")
                        .IsUnique()
                        .HasDatabaseName("Idx_ApplicationLanguage_ResourceKey_Language_LanguageKey_Unique");

                    b.ToTable("ApplicationLanguage", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4655),
                            Description = "Registro atualizado",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "RegisterUpdated",
                            LanguageValue = "Registro atualizado",
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4664),
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4663),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4665),
                            Description = "Default",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "Default_ptbr",
                            LanguageValue = "Padrão",
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4666),
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4666),
                            ResourceKey = "ApplicationLanguage"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4668),
                            Description = "Registro encontrado",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "RegisterIsFound",
                            LanguageValue = "Registro encontrado",
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4668),
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4668),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4669),
                            Description = "Registro não encontrado",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "RegisterIsNotFound",
                            LanguageValue = "Registro não encontrado",
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4670),
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4670),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4671),
                            Description = "Registro existe",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "RegisterExist",
                            LanguageValue = "Registro existe",
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4672),
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4672),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 6L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4673),
                            Description = "Registro deletado",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "RegisterDeleted",
                            LanguageValue = "Registro deletado",
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4674),
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4674),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 7L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4675),
                            Description = "Registro localizado",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "RegisterFind",
                            LanguageValue = "Registro localizado",
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4676),
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4675),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 8L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4677),
                            Description = "Registros contabilizados",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "RegisterCounted",
                            LanguageValue = "Registros contabilizados",
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4678),
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4677),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 9L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4679),
                            Description = "Registro criado",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "RegisterCreated",
                            LanguageValue = "Registro criado",
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4679),
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4679),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 10L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4681),
                            Description = "A descrição não pode ser vazia",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Description_Null",
                            LanguageValue = "A descrição não pode ser vazia",
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4681),
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4681),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 11L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4682),
                            Description = "O idoma não pode ser vazio",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Language_Null",
                            LanguageValue = "O idoma não pode ser vazio",
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4683),
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4683),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 12L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4684),
                            Description = "O idoma não pode ultrapassar {MaxLength}",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Language_MaximumLength",
                            LanguageValue = "O idoma não pode ultrapassar {MaxLength}",
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4685),
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4685),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 13L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4686),
                            Description = "Válido",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "LangValid",
                            LanguageValue = "Válido",
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4687),
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4686),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 14L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4688),
                            Description = "Ocorreram erros!",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "LangErrors",
                            LanguageValue = "Ocorreram erros!",
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4689),
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4688),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 15L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4690),
                            Description = "O medico deve ser informado.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_MedicalId_Null",
                            LanguageValue = "O medico deve ser informado.",
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4690),
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4690),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 16L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4692),
                            Description = "O medico informado não existe.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_MedicalId_NotFound",
                            LanguageValue = "O medico informado não existe.",
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4693),
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4692),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 17L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4694),
                            Description = "O medico infomado deve ser o mesmo logado. Medicos",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Medical_Changed",
                            LanguageValue = "O medico infomado deve ser o mesmo logado. Medicos nao podem criar arquivos de outro medico.",
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4695),
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4694),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 18L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4696),
                            Description = "O nome não pode ser vazio",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Name_Null",
                            LanguageValue = "O nome não pode ser vazio",
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4696),
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4696),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 19L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4698),
                            Description = "O Login não pode ser vazio.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Login_Null",
                            LanguageValue = "O Login não pode ser vazio.",
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4698),
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4698),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 20L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4699),
                            Description = "Login deve ser unico.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Login_Unique",
                            LanguageValue = "Login deve ser unico.",
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4700),
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4700),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 21L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4701),
                            Description = "O Email não pode ser vazio",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Email_Null",
                            LanguageValue = "O Email não pode ser vazio",
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4702),
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4702),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 22L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4703),
                            Description = "O Email é invalido.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Email_Invalid",
                            LanguageValue = "O Email é invalido.",
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4704),
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4704),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 23L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4705),
                            Description = "O Email deve ser unico.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Email_Unique",
                            LanguageValue = "O Email deve ser unico.",
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4706),
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4706),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 24L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4707),
                            Description = "O Credenciamento não pode ser vazio.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Accreditation_Null",
                            LanguageValue = "O Credenciamento não pode ser vazio.",
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4708),
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4707),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 25L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4709),
                            Description = "O Credenciamento deve ser unico.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Accreditation_Unique",
                            LanguageValue = "O Credenciamento deve ser unico.",
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4710),
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4709),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 26L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4711),
                            Description = "O medico infomado deve ser o mesmo logado. Medicos",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_MedicalCreated_Invalid",
                            LanguageValue = "O medico infomado deve ser o mesmo logado. Medicos nao podem criar arquivos de outro medico.",
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4711),
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4711),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 27L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4713),
                            Description = "O medico infomado deve ser o mesmo logado. Medicos",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_MedicalModify_Invalid",
                            LanguageValue = "O medico infomado deve ser o mesmo logado. Medicos nao podem modificar arquivos de outro medico.",
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4713),
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4713),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 28L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4714),
                            Description = "O Paciente deve ser informado.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Patient_Null",
                            LanguageValue = "O Paciente deve ser informado.",
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4715),
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4715),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 29L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4716),
                            Description = "O Paciente informado não existe.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Patient_NotFound",
                            LanguageValue = "O Paciente informado não existe.",
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4717),
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4717),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 30L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4718),
                            Description = "O Paciente não pode ser alterado.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Patient_Changed",
                            LanguageValue = "O Paciente não pode ser alterado.",
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4719),
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4718),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 31L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4720),
                            Description = "Informações do paciente não podem ser adicionadas ",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Patient_Medical_Created",
                            LanguageValue = "Informações do paciente não podem ser adicionadas por outro medico e/ou usuario.",
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4721),
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4720),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 32L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4722),
                            Description = "Informações do paciente não podem ser modificadas ",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Patient_Medical_Modify",
                            LanguageValue = "Informações do paciente não podem ser modificadas por outro medico e/ou usuario.",
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4722),
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4722),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 33L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4724),
                            Description = "O Usuário que está criando deve ser informado.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_CreatedUserId_Null",
                            LanguageValue = "O Usuário que está criando deve ser informado.",
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4724),
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4724),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 34L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4725),
                            Description = "A anotação não pode ser vazia.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_Annotation_Null",
                            LanguageValue = "A anotação não pode ser vazia.",
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4726),
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4726),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 35L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4727),
                            Description = "A data da anotação não pode ser vazia.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_AnnotationDate_Null",
                            LanguageValue = "A data da anotação não pode ser vazia.",
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4728),
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4727),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 36L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4729),
                            Description = "Data de nascimento invalido",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_DateOfBirth_Invalid",
                            LanguageValue = "Data de nascimento invalido",
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4730),
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4729),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 37L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4731),
                            Description = "O Rg não pode ser vazio.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_RG_Null",
                            LanguageValue = "O Rg não pode ser vazio.",
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4731),
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4731),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 38L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4733),
                            Description = "O CPF não pode ser vazio.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "ErrorValidator_CPF_Null",
                            LanguageValue = "O CPF não pode ser vazio.",
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4733),
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4733),
                            ResourceKey = "SharedResource"
                        },
                        new
                        {
                            Id = 39L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4734),
                            Description = "Ocorreu erro no processo.",
                            Enable = true,
                            Language = "pt-BR",
                            LanguageKey = "GenericErroMessage",
                            LanguageValue = "Ocorreu erro no processo.",
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4735),
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 702, DateTimeKind.Utc).AddTicks(4735),
                            ResourceKey = "SharedResource"
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.AuditDataEntityLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("AuditDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("KeyValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<string>("NewValues")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .HasColumnType("text");

                    b.Property<string>("OldValues")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .HasColumnType("text");

                    b.Property<string>("Operation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<long?>("UserAuditedId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserAuditedLogin")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserAuditedId");

                    b.HasIndex("TableName", "Operation")
                        .HasDatabaseName("Idx_TableName_Operation_Inc_AuditDate_UserAuditedId")
                        .HasAnnotation("SqlServer:Include", new[] { "AuditDate", "UserAuditedId" });

                    b.HasIndex("TableName", "Operation", "AuditDate", "UserAuditedId")
                        .HasDatabaseName("Idx_TableName_Operation_AuditDate_UserAuditedId");

                    b.ToTable("AuditDataEntityLog", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.AuditDataSelectiveEntityLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("AuditDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("KeyValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<string>("NewValues")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .HasColumnType("text");

                    b.Property<string>("OldValues")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .HasColumnType("text");

                    b.Property<string>("Operation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PartitionKey")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("RowKey")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<long?>("UserAuditedId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserAuditedLogin")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserAuditedId");

                    b.HasIndex("TableName", "Operation")
                        .HasDatabaseName("Idx_TableName_Operation_Inc_AuditDate_UserAuditedId")
                        .HasAnnotation("SqlServer:Include", new[] { "AuditDate", "UserAuditedId" });

                    b.HasIndex("TableName", "Operation", "AuditDate", "UserAuditedId")
                        .HasDatabaseName("Idx_TableName_Operation_AuditDate_UserAuditedId");

                    b.ToTable("AuditDataSelectiveEntityLog", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.Gender", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.HasKey("Id");

                    b.ToTable("Gender", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 703, DateTimeKind.Utc).AddTicks(6098),
                            Description = "Masculino",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 703, DateTimeKind.Utc).AddTicks(6101),
                            Description = "Feminino",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.InfoTag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<long>("MedicalId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("MedicalId");

                    b.HasIndex("ModifyUserId");

                    b.ToTable("InfoTag", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.Leaves", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<long?>("MedicalId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("MedicalId")
                        .HasDatabaseName("IX_Leaves_MedicalId");

                    b.HasIndex("StartDate", "EndDate")
                        .HasDatabaseName("IX_Leaves_StartDate_EndDate");

                    b.ToTable("Leaves", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 706, DateTimeKind.Utc).AddTicks(9292),
                            Description = "Ano Novo",
                            Enable = true,
                            IsRecurring = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 706, DateTimeKind.Utc).AddTicks(9299),
                            Description = "Carnaval",
                            Enable = true,
                            IsRecurring = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 2, 25, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 706, DateTimeKind.Utc).AddTicks(9301),
                            Description = "Sexta-feira Santa",
                            Enable = true,
                            IsRecurring = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 4, 18, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 4L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 706, DateTimeKind.Utc).AddTicks(9302),
                            Description = "Tiradentes",
                            Enable = true,
                            IsRecurring = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 4, 21, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 5L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 706, DateTimeKind.Utc).AddTicks(9303),
                            Description = "Dia do Trabalho",
                            Enable = true,
                            IsRecurring = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 6L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 706, DateTimeKind.Utc).AddTicks(9307),
                            Description = "Corpus Christi",
                            Enable = true,
                            IsRecurring = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 6, 19, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 7L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 706, DateTimeKind.Utc).AddTicks(9308),
                            Description = "Independência do Brasil",
                            Enable = true,
                            IsRecurring = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 9, 7, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 8L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 706, DateTimeKind.Utc).AddTicks(9309),
                            Description = "Nossa Senhora Aparecida",
                            Enable = true,
                            IsRecurring = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 10, 12, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 9L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 706, DateTimeKind.Utc).AddTicks(9310),
                            Description = "Finados",
                            Enable = true,
                            IsRecurring = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 11, 2, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 10L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 706, DateTimeKind.Utc).AddTicks(9312),
                            Description = "Proclamação da República",
                            Enable = true,
                            IsRecurring = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 11, 15, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 11L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 706, DateTimeKind.Utc).AddTicks(9313),
                            Description = "Natal",
                            Enable = true,
                            IsRecurring = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 12, 25, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.Medical", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Accreditation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Email")
                        .HasColumnOrder(3);

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<TimeSpan>("EndWorkingTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Name")
                        .HasColumnOrder(2);

                    b.Property<long>("OfficeId")
                        .HasColumnType("bigint");

                    b.Property<byte>("PatientIntervalTimeMinutes")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("SecurityKey")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<TimeSpan>("StartWorkingTime")
                        .HasColumnType("time");

                    b.Property<byte>("TypeAccreditation")
                        .HasColumnType("tinyint unsigned");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("WorkingDays")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifyUserId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("UserId");

                    b.ToTable("Medical", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Accreditation = "123456",
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 713, DateTimeKind.Utc).AddTicks(9073),
                            CreatedUserId = 1L,
                            Email = "medical@sistemas.com",
                            Enable = true,
                            EndWorkingTime = new TimeSpan(0, 20, 0, 0, 0),
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 713, DateTimeKind.Utc).AddTicks(9075),
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 713, DateTimeKind.Utc).AddTicks(9075),
                            Name = "Dr. Gabriel Monteiro",
                            OfficeId = 1L,
                            PatientIntervalTimeMinutes = (byte)60,
                            SecurityKey = "",
                            StartWorkingTime = new TimeSpan(0, 6, 0, 0, 0),
                            TypeAccreditation = (byte)0,
                            WorkingDays = "1,2,3,4,5,6"
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.MedicalCalendar", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ColorCategoryHexa")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("text");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsAllDay")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPushedCalendar")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<long>("MedicalId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<string>("ReasonCancellation")
                        .HasMaxLength(1000)
                        .HasColumnType("text");

                    b.Property<short?>("RecurrenceCount")
                        .HasColumnType("smallint");

                    b.Property<string>("RecurrenceDays")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("RecurrenceEndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<byte>("RecurrenceType")
                        .HasColumnType("tinyint unsigned");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TokenRecurrence")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("MedicalId");

                    b.HasIndex("ModifyUserId");

                    b.HasIndex("PatientId");

                    b.HasIndex("TokenRecurrence")
                        .HasDatabaseName("Idx_TokenRecurrence_Inc_PatientId_MedicalId_StartDateTime_EndDateTime_TokenRecurrence")
                        .HasAnnotation("SqlServer:Include", new[] { "PatientId", "MedicalId", "StartDateTime", "EndDateTime" });

                    b.HasIndex("TokenRecurrence", "PatientId", "MedicalId", "StartDateTime", "EndDateTime")
                        .HasDatabaseName("Idx_TokenRecurrence_PatientId_MedicalId_StartDateTime_EndDateTime_TokenRecurrence");

                    b.ToTable("MedicalCalendar", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.MedicalFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Description");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("FileBlobName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FileBlobName");

                    b.Property<string>("FileCloudContainer")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("FileCloudContainer");

                    b.Property<string>("FileContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FileContentType");

                    b.Property<byte[]>("FileData")
                        .IsRequired()
                        .HasColumnType("longblob")
                        .HasColumnName("FileData");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("FileExtension");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FileName");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(2083)
                        .HasColumnType("varchar(2083)")
                        .HasColumnName("FilePath");

                    b.Property<long>("FileSizeKB")
                        .HasColumnType("bigint")
                        .HasColumnName("FileSizeKB");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<long>("MedicalId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<byte>("TypeLocationSaveFile")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("TypeLocationSaveFile");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("MedicalId");

                    b.HasIndex("ModifyUserId");

                    b.ToTable("MedicalFile", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.MedicalSettings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("GoogleAccessToken")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("GoogleCalendarId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("GoogleRefreshToken")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("GoogleTokenExpiry")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<long>("MedicalId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MedicalId1")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.HasKey("Id");

                    b.HasIndex("MedicalId");

                    b.HasIndex("MedicalId1");

                    b.ToTable("MedicalSettings", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.MedicalSpecialty", b =>
                {
                    b.Property<long>("MedicalId")
                        .HasColumnType("bigint");

                    b.Property<long>("SpecialtyId")
                        .HasColumnType("bigint");

                    b.HasKey("MedicalId", "SpecialtyId");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("MedicalSpecialty", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");

                    b.HasData(
                        new
                        {
                            MedicalId = 1L,
                            SpecialtyId = 1L
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.NotificationRecords", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FinalSendDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<long?>("MedicalCalendarId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<DateTime?>("NextScheduledSendTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NotificationRules")
                        .IsRequired()
                        .HasMaxLength(65535)
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IsCompleted")
                        .HasDatabaseName("IX_NotificationRecords_IsCompleted");

                    b.HasIndex("MedicalCalendarId")
                        .HasDatabaseName("IX_NotificationRecords_MedicalCalendarId");

                    b.HasIndex("NextScheduledSendTime")
                        .HasDatabaseName("IX_NotificationRecords_NextScheduledSendTime");

                    b.ToTable("NotificationRecords", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.NotificationRules", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ENotificationServiceType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<short>("IntervalType")
                        .HasColumnType("smallint");

                    b.Property<short>("IntervalValue")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsBefore")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<long>("MedicalId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<short>("NotificationType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("MedicalId")
                        .HasDatabaseName("IX_NotificationRules_MedicalId");

                    b.ToTable("NotificationRules", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 722, DateTimeKind.Utc).AddTicks(3283),
                            Description = "Envio 24 horas antes do agendamento",
                            ENotificationServiceType = "0",
                            Enable = true,
                            IntervalType = (short)1,
                            IntervalValue = (short)24,
                            IsBefore = true,
                            IsEnabled = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 722, DateTimeKind.Utc).AddTicks(3286),
                            MedicalId = 1L,
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 722, DateTimeKind.Utc).AddTicks(3285),
                            NotificationType = (short)0
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 722, DateTimeKind.Utc).AddTicks(3288),
                            Description = "Envio 3 dias antes do agendamento",
                            ENotificationServiceType = "0",
                            Enable = true,
                            IntervalType = (short)2,
                            IntervalValue = (short)3,
                            IsBefore = true,
                            IsEnabled = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 722, DateTimeKind.Utc).AddTicks(3289),
                            MedicalId = 1L,
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 722, DateTimeKind.Utc).AddTicks(3289),
                            NotificationType = (short)0
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 722, DateTimeKind.Utc).AddTicks(3291),
                            Description = "Envio 1 hora antes do agendamento",
                            ENotificationServiceType = "0",
                            Enable = true,
                            IntervalType = (short)1,
                            IntervalValue = (short)1,
                            IsBefore = true,
                            IsEnabled = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 722, DateTimeKind.Utc).AddTicks(3292),
                            MedicalId = 1L,
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 722, DateTimeKind.Utc).AddTicks(3291),
                            NotificationType = (short)0
                        },
                        new
                        {
                            Id = 4L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 722, DateTimeKind.Utc).AddTicks(3293),
                            Description = "Envio 15 minutos antes do agendamento",
                            ENotificationServiceType = "0",
                            Enable = true,
                            IntervalType = (short)0,
                            IntervalValue = (short)15,
                            IsBefore = true,
                            IsEnabled = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 722, DateTimeKind.Utc).AddTicks(3294),
                            MedicalId = 1L,
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 722, DateTimeKind.Utc).AddTicks(3294),
                            NotificationType = (short)0
                        },
                        new
                        {
                            Id = 5L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 722, DateTimeKind.Utc).AddTicks(3296),
                            Description = "Lembrete de pagamento (3 dias antes do vencimento)",
                            ENotificationServiceType = "0",
                            Enable = true,
                            IntervalType = (short)2,
                            IntervalValue = (short)3,
                            IsBefore = true,
                            IsEnabled = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 722, DateTimeKind.Utc).AddTicks(3296),
                            MedicalId = 1L,
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 722, DateTimeKind.Utc).AddTicks(3296),
                            NotificationType = (short)2
                        },
                        new
                        {
                            Id = 6L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 722, DateTimeKind.Utc).AddTicks(3298),
                            Description = "Envio 48 horas antes do agendamento",
                            ENotificationServiceType = "0",
                            Enable = true,
                            IntervalType = (short)1,
                            IntervalValue = (short)48,
                            IsBefore = true,
                            IsEnabled = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 722, DateTimeKind.Utc).AddTicks(3299),
                            MedicalId = 1L,
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 722, DateTimeKind.Utc).AddTicks(3298),
                            NotificationType = (short)0
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.NotificationTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(65535)
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<byte>("NotificationTemplateType")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("TagApi")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Language")
                        .HasDatabaseName("IX_NotificationTemplate_Language");

                    b.HasIndex("TagApi")
                        .HasDatabaseName("IX_NotificationTemplate_TagApi");

                    b.HasIndex("Language", "TagApi")
                        .IsUnique()
                        .HasDatabaseName("IX_NotificationTemplate_Language_TagApi_Unique");

                    b.HasIndex("Language", "TagApi", "Enable")
                        .HasDatabaseName("IX_NotificationTemplate_Language_TagApi_Enable");

                    b.ToTable("NotificationTemplate", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Body = "<p>Seu acesso foi concedido com sucesso.</p>",
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 722, DateTimeKind.Utc).AddTicks(6646),
                            Description = "Liberar Login",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 722, DateTimeKind.Utc).AddTicks(6648),
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 722, DateTimeKind.Utc).AddTicks(6647),
                            NotificationTemplateType = (byte)0,
                            Subject = "Acesso Concedido",
                            TagApi = "LoginReleaseEmail"
                        },
                        new
                        {
                            Id = 2L,
                            Body = "<p>Seus dados da conta foram atualizados com sucesso.</p>",
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 722, DateTimeKind.Utc).AddTicks(6650),
                            Description = "Alteração de Conta Concluída",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 722, DateTimeKind.Utc).AddTicks(6650),
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 722, DateTimeKind.Utc).AddTicks(6650),
                            NotificationTemplateType = (byte)0,
                            Subject = "Dados da Conta Atualizados",
                            TagApi = "AccountChangeSuccess"
                        },
                        new
                        {
                            Id = 3L,
                            Body = "<p>Sua consulta foi agendada com sucesso.</p>",
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 722, DateTimeKind.Utc).AddTicks(6652),
                            Description = "Consulta Agendada",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 722, DateTimeKind.Utc).AddTicks(6653),
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 722, DateTimeKind.Utc).AddTicks(6652),
                            NotificationTemplateType = (byte)0,
                            Subject = "Sua Consulta Foi Agendada",
                            TagApi = "AppointmentScheduledSuccess"
                        },
                        new
                        {
                            Id = 4L,
                            Body = "<p>Sua consulta foi remarcada com sucesso.</p>",
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 722, DateTimeKind.Utc).AddTicks(6654),
                            Description = "Consulta Remarcada",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 722, DateTimeKind.Utc).AddTicks(6655),
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 722, DateTimeKind.Utc).AddTicks(6654),
                            NotificationTemplateType = (byte)0,
                            Subject = "Sua Consulta Foi Remarcada",
                            TagApi = "AppointmentRescheduled"
                        },
                        new
                        {
                            Id = 5L,
                            Body = "<p>Sua consulta foi cancelada.</p>",
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 722, DateTimeKind.Utc).AddTicks(6656),
                            Description = "Consulta Cancelada",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 722, DateTimeKind.Utc).AddTicks(6657),
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 722, DateTimeKind.Utc).AddTicks(6656),
                            NotificationTemplateType = (byte)0,
                            Subject = "Sua Consulta Foi Cancelada",
                            TagApi = "AppointmentCancelled"
                        },
                        new
                        {
                            Id = 6L,
                            Body = "<p>Seus dados médicos foram atualizados com sucesso.</p>",
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 722, DateTimeKind.Utc).AddTicks(6658),
                            Description = "Atualização de Cadastro Médico",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 722, DateTimeKind.Utc).AddTicks(6659),
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 722, DateTimeKind.Utc).AddTicks(6658),
                            NotificationTemplateType = (byte)0,
                            Subject = "Dados Médicos Atualizados",
                            TagApi = "MedicalUpdateEmail"
                        },
                        new
                        {
                            Id = 7L,
                            Body = "<p>Este é um lembrete para sua consulta agendada.</p>",
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 722, DateTimeKind.Utc).AddTicks(6660),
                            Description = "Lembrete de Consulta",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 722, DateTimeKind.Utc).AddTicks(6661),
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 722, DateTimeKind.Utc).AddTicks(6660),
                            NotificationTemplateType = (byte)0,
                            Subject = "Lembrete de Consulta Agendada",
                            TagApi = "AppointmentReminder"
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.Office", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.HasKey("Id");

                    b.ToTable("Office", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 722, DateTimeKind.Utc).AddTicks(8536),
                            Description = "Psicólogo",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 722, DateTimeKind.Utc).AddTicks(8539),
                            Description = "Psicóloga",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 722, DateTimeKind.Utc).AddTicks(8541),
                            Description = "Clínico",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.Patient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AddressCep")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("AddressCity")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AddressNeighborhood")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AddressState")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AddressStreet")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Education")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Email")
                        .HasColumnOrder(3);

                    b.Property<string>("EmergencyContactName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EmergencyContactPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<long>("GenderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<byte>("MaritalStatus")
                        .HasColumnType("tinyint unsigned");

                    b.Property<long>("MedicalId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Name")
                        .HasColumnOrder(2);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Profession")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Rg")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("GenderId");

                    b.HasIndex("MedicalId");

                    b.HasIndex("ModifyUserId");

                    b.ToTable("Patient", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AddressCep = "45675-970",
                            AddressCity = "Aurelino Leal",
                            AddressNeighborhood = "Centro",
                            AddressState = "Bahia",
                            AddressStreet = "Avenida Presidente Médici 264",
                            Cpf = "947.846.605-42",
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 726, DateTimeKind.Utc).AddTicks(4942),
                            CreatedUserId = 2L,
                            DateOfBirth = new DateTime(1960, 3, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Education = "Superior",
                            Email = "tiago.thales.mendes@andrade.com",
                            EmergencyContactName = "Milena Isabelly Vanessa",
                            EmergencyContactPhoneNumber = "(73) 98540-4268",
                            Enable = true,
                            GenderId = 1L,
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 726, DateTimeKind.Utc).AddTicks(4943),
                            MaritalStatus = (byte)0,
                            MedicalId = 1L,
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 726, DateTimeKind.Utc).AddTicks(4943),
                            Name = "Tiago Thales Mendes",
                            PhoneNumber = "(73) 2877-3408",
                            Profession = "Professor",
                            Rg = "13.809.283-7"
                        },
                        new
                        {
                            Id = 2L,
                            AddressCep = "12345-678",
                            AddressCity = "São Paulo",
                            AddressNeighborhood = "Jardins",
                            AddressState = "São Paulo",
                            AddressStreet = "Rua das Flores, 123",
                            Cpf = "123.456.789-00",
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 726, DateTimeKind.Utc).AddTicks(4970),
                            CreatedUserId = 2L,
                            DateOfBirth = new DateTime(1990, 5, 22, 0, 0, 0, 0, DateTimeKind.Utc),
                            Education = "Médio Completo",
                            Email = "ana.luiza@domain.com",
                            EmergencyContactName = "Carlos Ferreira",
                            EmergencyContactPhoneNumber = "(11) 91234-5678",
                            Enable = true,
                            GenderId = 2L,
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 726, DateTimeKind.Utc).AddTicks(4970),
                            MaritalStatus = (byte)0,
                            MedicalId = 1L,
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 726, DateTimeKind.Utc).AddTicks(4971),
                            Name = "Ana Luiza Ferreira",
                            PhoneNumber = "(11) 4002-8922",
                            Profession = "Estudante",
                            Rg = "12.345.678-9"
                        },
                        new
                        {
                            Id = 3L,
                            AddressCep = "98765-432",
                            AddressCity = "Rio de Janeiro",
                            AddressNeighborhood = "Copacabana",
                            AddressState = "Rio de Janeiro",
                            AddressStreet = "Av. Atlântica, 456",
                            Cpf = "987.654.321-99",
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 726, DateTimeKind.Utc).AddTicks(4975),
                            CreatedUserId = 2L,
                            DateOfBirth = new DateTime(1985, 8, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Education = "Superior Completo",
                            Email = "jose.henrique@domain.com",
                            EmergencyContactName = "Mariana Silva",
                            EmergencyContactPhoneNumber = "(21) 99876-5432",
                            Enable = true,
                            GenderId = 1L,
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 726, DateTimeKind.Utc).AddTicks(4976),
                            MaritalStatus = (byte)0,
                            MedicalId = 1L,
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 726, DateTimeKind.Utc).AddTicks(4976),
                            Name = "José Henrique Silva",
                            PhoneNumber = "(21) 3000-7000",
                            Profession = "Advogado",
                            Rg = "98.765.432-1"
                        },
                        new
                        {
                            Id = 4L,
                            AddressCep = "45678-123",
                            AddressCity = "Belo Horizonte",
                            AddressNeighborhood = "Savassi",
                            AddressState = "Minas Gerais",
                            AddressStreet = "Rua dos Ipês, 789",
                            Cpf = "456.789.123-10",
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 726, DateTimeKind.Utc).AddTicks(4980),
                            CreatedUserId = 2L,
                            DateOfBirth = new DateTime(1975, 12, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Education = "Pós-Graduação",
                            Email = "maria.clara@domain.com",
                            EmergencyContactName = "Fernando Oliveira",
                            EmergencyContactPhoneNumber = "(31) 97654-3210",
                            Enable = true,
                            GenderId = 2L,
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 726, DateTimeKind.Utc).AddTicks(4980),
                            MaritalStatus = (byte)0,
                            MedicalId = 1L,
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 726, DateTimeKind.Utc).AddTicks(4981),
                            Name = "Maria Clara Oliveira",
                            PhoneNumber = "(31) 4004-3003",
                            Profession = "Arquiteta",
                            Rg = "45.678.912-0"
                        },
                        new
                        {
                            Id = 5L,
                            AddressCep = "65432-789",
                            AddressCity = "Curitiba",
                            AddressNeighborhood = "Centro Cívico",
                            AddressState = "Paraná",
                            AddressStreet = "Av. Paraná, 987",
                            Cpf = "654.321.987-88",
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 726, DateTimeKind.Utc).AddTicks(4984),
                            CreatedUserId = 2L,
                            DateOfBirth = new DateTime(2000, 7, 18, 0, 0, 0, 0, DateTimeKind.Utc),
                            Education = "Fundamental Completo",
                            Email = "gabriel.santos@domain.com",
                            EmergencyContactName = "Lucas Santos",
                            EmergencyContactPhoneNumber = "(41) 98432-1234",
                            Enable = true,
                            GenderId = 1L,
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 726, DateTimeKind.Utc).AddTicks(4984),
                            MaritalStatus = (byte)0,
                            MedicalId = 1L,
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 726, DateTimeKind.Utc).AddTicks(4984),
                            Name = "Gabriel Santos",
                            PhoneNumber = "(41) 3020-8989",
                            Profession = "Atendente",
                            Rg = "65.432.198-7"
                        },
                        new
                        {
                            Id = 6L,
                            AddressCep = "89010-123",
                            AddressCity = "Blumenau",
                            AddressNeighborhood = "Centro",
                            AddressState = "Santa Catarina",
                            AddressStreet = "Rua das Flores, 45",
                            Cpf = "456.123.789-09",
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 726, DateTimeKind.Utc).AddTicks(4987),
                            CreatedUserId = 2L,
                            DateOfBirth = new DateTime(1990, 6, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Education = "Médio Completo",
                            Email = "laura.costa@example.com",
                            EmergencyContactName = "Ana Costa",
                            EmergencyContactPhoneNumber = "(47) 99987-6543",
                            Enable = true,
                            GenderId = 2L,
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 726, DateTimeKind.Utc).AddTicks(4988),
                            MaritalStatus = (byte)0,
                            MedicalId = 1L,
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 726, DateTimeKind.Utc).AddTicks(4988),
                            Name = "Laura Carolina Costa",
                            PhoneNumber = "(47) 3030-2020",
                            Profession = "Estilista",
                            Rg = "12.345.678-9"
                        },
                        new
                        {
                            Id = 7L,
                            AddressCep = "01310-100",
                            AddressCity = "São Paulo",
                            AddressNeighborhood = "Bela Vista",
                            AddressState = "São Paulo",
                            AddressStreet = "Avenida Paulista, 1500",
                            Cpf = "123.456.789-00",
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 726, DateTimeKind.Utc).AddTicks(4994),
                            CreatedUserId = 2L,
                            DateOfBirth = new DateTime(1985, 11, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Education = "Pós-Graduação",
                            Email = "diego.almeida@example.com",
                            EmergencyContactName = "Marina Almeida",
                            EmergencyContactPhoneNumber = "(11) 98888-1234",
                            Enable = true,
                            GenderId = 1L,
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 726, DateTimeKind.Utc).AddTicks(4994),
                            MaritalStatus = (byte)0,
                            MedicalId = 1L,
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 726, DateTimeKind.Utc).AddTicks(4994),
                            Name = "Diego Rafael Almeida",
                            PhoneNumber = "(11) 3111-4567",
                            Profession = "Analista de Sistemas",
                            Rg = "23.456.789-0"
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.PatientAdditionalInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("FollowUp_Neurological")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("FollowUp_Psychiatric")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifyUserId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientAdditionalInformation", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.PatientFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Description");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("FileBlobName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FileBlobName");

                    b.Property<string>("FileCloudContainer")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("FileCloudContainer");

                    b.Property<string>("FileContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FileContentType");

                    b.Property<byte[]>("FileData")
                        .IsRequired()
                        .HasColumnType("longblob")
                        .HasColumnName("FileData");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("FileExtension");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FileName");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(2083)
                        .HasColumnType("varchar(2083)")
                        .HasColumnName("FilePath");

                    b.Property<long>("FileSizeKB")
                        .HasColumnType("bigint")
                        .HasColumnName("FileSizeKB");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<byte>("TypeLocationSaveFile")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("TypeLocationSaveFile");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifyUserId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientFile", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.PatientHospitalizationInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CID")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Observation")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifyUserId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientHospitalizationInformation", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.PatientInfoTag", b =>
                {
                    b.Property<long>("InfoTagId")
                        .HasColumnType("bigint");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.HasKey("InfoTagId", "PatientId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientInfoTag", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.PatientMedicationInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<string>("MainDrug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<string>("Posology")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifyUserId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientMedicationInformation", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.PatientNotificationMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsReaded")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<string>("MessagePatient")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Notified")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("NotifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ReadingDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifyUserId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientNotificationMessage", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.PatientRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Annotation")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("text");

                    b.Property<DateTime>("AnnotationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<long?>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<string>("TableStorageRowKey")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifyUserId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientRecord", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.RoleGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<string>("RolePolicyClaimCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.HasKey("Id");

                    b.ToTable("RoleGroup", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 729, DateTimeKind.Utc).AddTicks(8407),
                            Description = "Administrador",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RolePolicyClaimCode = "Admin"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 729, DateTimeKind.Utc).AddTicks(8410),
                            Description = "Medico",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RolePolicyClaimCode = "Medical"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 729, DateTimeKind.Utc).AddTicks(8411),
                            Description = "Recepcionista",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RolePolicyClaimCode = "Staff"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 729, DateTimeKind.Utc).AddTicks(8413),
                            Description = "Paciente",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RolePolicyClaimCode = "Patient"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 729, DateTimeKind.Utc).AddTicks(8414),
                            Description = "Leitura",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RolePolicyClaimCode = "Read"
                        },
                        new
                        {
                            Id = 6L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 729, DateTimeKind.Utc).AddTicks(8415),
                            Description = "Escrita",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RolePolicyClaimCode = "Write"
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.RoleGroupUser", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleGroupId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleGroupId");

                    b.HasIndex("RoleGroupId");

                    b.ToTable("RoleGroupUser", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");

                    b.HasData(
                        new
                        {
                            UserId = 1L,
                            RoleGroupId = 1L
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.Specialty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.HasKey("Id");

                    b.ToTable("Specialty", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 730, DateTimeKind.Utc).AddTicks(5418),
                            Description = "Psicologia Clínica",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 730, DateTimeKind.Utc).AddTicks(5421),
                            Description = "Psicologia Social",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 730, DateTimeKind.Utc).AddTicks(5423),
                            Description = "Psicologia educacional",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 730, DateTimeKind.Utc).AddTicks(5424),
                            Description = "Psicologia Esportiva ",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 730, DateTimeKind.Utc).AddTicks(5425),
                            Description = "Psicologia organizacional",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 730, DateTimeKind.Utc).AddTicks(5426),
                            Description = "Psicologia hospitalar",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7L,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 730, DateTimeKind.Utc).AddTicks(5428),
                            Description = "Psicologia do trânsito",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Admin")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Email")
                        .HasColumnOrder(3);

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.Property<long?>("MedicalId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Name")
                        .HasColumnOrder(2);

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("Refresh_token_expiry_time");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("MedicalId");

                    b.ToTable("User", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Admin = true,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 731, DateTimeKind.Utc).AddTicks(1290),
                            Email = "admin@sistemas.com",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 731, DateTimeKind.Utc).AddTicks(1291),
                            Login = "admin",
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 731, DateTimeKind.Utc).AddTicks(1292),
                            Name = "User MOCK ",
                            PasswordHash = new byte[] { 70, 29, 171, 242, 170, 46, 91, 177, 239, 144, 188, 38, 251, 134, 82, 136, 123, 63, 159, 102, 159, 128, 246, 230, 124, 153, 66, 41, 142, 217, 123, 224, 20, 249, 162, 247, 223, 49, 145, 196, 225, 201, 60, 9, 67, 255, 205, 198, 137, 141, 231, 20, 104, 25, 80, 251, 97, 153, 182, 57, 46, 123, 214, 198 },
                            PasswordSalt = new byte[] { 252, 203, 85, 134, 251, 98, 255, 141, 7, 141, 2, 233, 70, 99, 100, 55, 78, 60, 45, 24, 225, 212, 230, 247, 91, 91, 103, 32, 191, 86, 107, 163, 14, 4, 57, 58, 234, 85, 55, 68, 66, 219, 166, 100, 19, 92, 27, 75, 116, 95, 54, 131, 58, 176, 251, 121, 152, 223, 22, 151, 141, 60, 159, 20, 134, 195, 134, 176, 79, 78, 110, 112, 207, 14, 154, 140, 102, 44, 134, 157, 27, 232, 137, 58, 77, 174, 11, 38, 209, 206, 213, 254, 117, 244, 13, 165, 73, 95, 27, 173, 148, 18, 98, 29, 108, 88, 159, 61, 190, 119, 188, 66, 167, 111, 49, 217, 92, 48, 128, 63, 52, 69, 133, 42, 220, 139, 162, 187 },
                            RefreshToken = "",
                            Role = "Admin",
                            TimeZone = "E. South America Standard Time"
                        },
                        new
                        {
                            Id = 2L,
                            Admin = false,
                            CreatedDate = new DateTime(2025, 3, 6, 23, 47, 57, 733, DateTimeKind.Utc).AddTicks(3106),
                            Email = "doctor@sistemas.com",
                            Enable = true,
                            Language = "pt-BR",
                            LastAccessDate = new DateTime(2025, 3, 6, 23, 47, 57, 733, DateTimeKind.Utc).AddTicks(3107),
                            Login = "doctor",
                            MedicalId = 1L,
                            ModifyDate = new DateTime(2025, 3, 6, 23, 47, 57, 733, DateTimeKind.Utc).AddTicks(3108),
                            Name = "Dr. Gabriel Monteiro",
                            PasswordHash = new byte[] { 217, 199, 221, 91, 77, 203, 215, 117, 66, 42, 88, 254, 100, 109, 86, 142, 118, 44, 150, 233, 205, 181, 126, 177, 48, 76, 185, 29, 55, 206, 235, 42, 163, 167, 85, 160, 25, 182, 230, 176, 18, 80, 28, 54, 186, 188, 142, 240, 52, 93, 23, 92, 111, 164, 134, 233, 174, 198, 40, 253, 92, 121, 132, 26 },
                            PasswordSalt = new byte[] { 250, 73, 224, 250, 97, 197, 157, 63, 35, 41, 188, 165, 15, 198, 4, 166, 127, 89, 216, 157, 185, 25, 72, 165, 114, 140, 21, 80, 87, 135, 117, 196, 132, 166, 223, 158, 162, 155, 146, 111, 46, 33, 154, 110, 124, 5, 70, 74, 66, 171, 198, 146, 249, 199, 62, 223, 78, 247, 37, 16, 38, 182, 254, 132, 91, 182, 126, 54, 253, 127, 113, 191, 1, 27, 107, 115, 126, 86, 87, 70, 94, 244, 36, 111, 35, 251, 121, 153, 250, 59, 233, 159, 182, 53, 232, 200, 197, 164, 107, 172, 160, 107, 134, 125, 186, 130, 33, 44, 58, 15, 185, 172, 106, 26, 174, 127, 114, 73, 50, 116, 241, 160, 76, 249, 44, 235, 91, 181 },
                            RefreshToken = "",
                            Role = "Medical",
                            TimeZone = "E. South America Standard Time"
                        });
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.UserTokenSession", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedDate");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Enable")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastAccessDate");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ModifyDate");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("text");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("Refresh_token_expiry_time");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserTokenSession", "dbo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.AuditDataEntityLog", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "UserAudited")
                        .WithMany()
                        .HasForeignKey("UserAuditedId");

                    b.Navigation("UserAudited");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.AuditDataSelectiveEntityLog", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "UserAudited")
                        .WithMany()
                        .HasForeignKey("UserAuditedId");

                    b.Navigation("UserAudited");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.InfoTag", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Medical", "Medical")
                        .WithMany()
                        .HasForeignKey("MedicalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserId");

                    b.Navigation("CreatedUser");

                    b.Navigation("Medical");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.Leaves", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Medical", "Medical")
                        .WithMany()
                        .HasForeignKey("MedicalId");

                    b.Navigation("Medical");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.Medical", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "CreatedUser")
                        .WithMany("MedicalsCreateds")
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "ModifyUser")
                        .WithMany("MedicalModifies")
                        .HasForeignKey("ModifyUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Office", "Office")
                        .WithMany("Medicals")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "User")
                        .WithMany("MedicalsUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifyUser");

                    b.Navigation("Office");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.MedicalCalendar", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Medical", "Medical")
                        .WithMany()
                        .HasForeignKey("MedicalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.Navigation("CreatedUser");

                    b.Navigation("Medical");

                    b.Navigation("ModifyUser");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.MedicalFile", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Medical", "Medical")
                        .WithMany()
                        .HasForeignKey("MedicalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserId");

                    b.Navigation("CreatedUser");

                    b.Navigation("Medical");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.MedicalSettings", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Medical", "Medical")
                        .WithMany()
                        .HasForeignKey("MedicalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Medical", null)
                        .WithMany("MedicalSettings")
                        .HasForeignKey("MedicalId1");

                    b.Navigation("Medical");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.MedicalSpecialty", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Medical", "Medical")
                        .WithMany("MedicalSpecialties")
                        .HasForeignKey("MedicalId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Specialty", "Specialty")
                        .WithMany("MedicalSpecialties")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Medical");

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.NotificationRecords", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.MedicalCalendar", "MedicalCalendar")
                        .WithMany()
                        .HasForeignKey("MedicalCalendarId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("MedicalCalendar");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.NotificationRules", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Medical", "Medical")
                        .WithMany()
                        .HasForeignKey("MedicalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medical");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.Patient", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Gender", "Gender")
                        .WithMany("Patients")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Medical", "Medical")
                        .WithMany("Patienties")
                        .HasForeignKey("MedicalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserId");

                    b.Navigation("CreatedUser");

                    b.Navigation("Gender");

                    b.Navigation("Medical");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.PatientAdditionalInformation", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Patient", "Patient")
                        .WithMany("PatientAdditionalInformations")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifyUser");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.PatientFile", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifyUser");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.PatientHospitalizationInformation", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Patient", "Patient")
                        .WithMany("PatientHospitalizationInformations")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifyUser");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.PatientInfoTag", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.InfoTag", "InfoTag")
                        .WithMany("PatientInfoTags")
                        .HasForeignKey("InfoTagId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Patient", "Patient")
                        .WithMany("PatientInfoTags")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("InfoTag");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.PatientMedicationInformation", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Patient", "Patient")
                        .WithMany("PatientMedicationInformations")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifyUser");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.PatientNotificationMessage", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifyUser");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.PatientRecord", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "ModifyUser")
                        .WithMany()
                        .HasForeignKey("ModifyUserId");

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Patient", "Patient")
                        .WithMany("PatientRecords")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifyUser");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.RoleGroupUser", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.RoleGroup", "RoleGroup")
                        .WithMany("UserRoleGroups")
                        .HasForeignKey("RoleGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "User")
                        .WithMany("UserRoleGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("RoleGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.User", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.Medical", "Medical")
                        .WithMany()
                        .HasForeignKey("MedicalId");

                    b.Navigation("Medical");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.UserTokenSession", b =>
                {
                    b.HasOne("SmartDigitalPsico.Domain.ModelEntity.User", "User")
                        .WithOne("TokenSession")
                        .HasForeignKey("SmartDigitalPsico.Domain.ModelEntity.UserTokenSession", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.Gender", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.InfoTag", b =>
                {
                    b.Navigation("PatientInfoTags");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.Medical", b =>
                {
                    b.Navigation("MedicalSettings");

                    b.Navigation("MedicalSpecialties");

                    b.Navigation("Patienties");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.Office", b =>
                {
                    b.Navigation("Medicals");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.Patient", b =>
                {
                    b.Navigation("PatientAdditionalInformations");

                    b.Navigation("PatientHospitalizationInformations");

                    b.Navigation("PatientInfoTags");

                    b.Navigation("PatientMedicationInformations");

                    b.Navigation("PatientRecords");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.RoleGroup", b =>
                {
                    b.Navigation("UserRoleGroups");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.Specialty", b =>
                {
                    b.Navigation("MedicalSpecialties");
                });

            modelBuilder.Entity("SmartDigitalPsico.Domain.ModelEntity.User", b =>
                {
                    b.Navigation("MedicalModifies");

                    b.Navigation("MedicalsCreateds");

                    b.Navigation("MedicalsUsers");

                    b.Navigation("TokenSession");

                    b.Navigation("UserRoleGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
