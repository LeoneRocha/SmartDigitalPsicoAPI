----------------------------------------------------
https://github.com/LeoneRocha/SmartDigitalPsicoAPI/tree/developer
https://lionscorp.visualstudio.com/SMARTDIGITALPSICO
https://lionscorp.visualstudio.com/SMARTDIGITALPSICO/_build
https://portal.azure.com/#home
https://painelbd.host.uol.com.br/main.html?servicetype=mysql
https://sonarcloud.io/project/branches_list?id=lionscorp_smartdigitalpsico
https://hub.docker.com/repository/docker/leonecr/smartdigitalpsicorepo/general
** para gerar pro mysql tem que gerar do zero a migracao 
----------------------------------------------------
 Readequacao 

01  - Domain ------- Finalizado 
02  - Data ------- Finalizado  
03  - Service -------  Finalizado 
04  - API ------- Finalizado 
05  - Testar Localmente sem DOCKER ------- Finalizado  
06  - reduzido codigo de generico duplicado ------- Finalizado 
07  - MIGRAR DATA NOTATION PARA FLUENT API  ------- Finalizado
08  - Ajustar a carga de mock ------- Finalizado
09  - Revisar o service para ver se ainda usa entidadee em vez do ID mudar pra ID as FK ------- Finalizado
10  - Mudar para MYSQL ------- Finalizado
11  - Automação ------------ Finalizado
12  - HABLITAR SONNAR ------------ Finalizado
13  - HABLITAR DOCKER---------- EM ANDAMENTO 
-- ADICIONADO SUPORTE -- OK 
-- CRIADO SERVICE CONNECTION
-- TESTE MANUAL PARA REGISTRAR NO DOCKER HUB
-- FAZER A PIPE LINE  PUBLICAR NO DOCKER HUB 
--- FAZER A RELEASE UTILIZAR O DOCKER HUB PAGAR IMAGEN NA PUBLICACAO

smartdigitalpsicorepo

14  - CRIAR PROJETO DE TESTE DO DATA 
15  - TESTAR O SISTEMA ------- ON HOLD -- CONFIGURAR O BUILD E DEPLOY AUTOMATICO "Automação"

----------------------------------------------------
- 1) Configurar ao realizar pull request para integration disparar pipeline integration  ------- Finalizado

- 2) Configurar a integration para Deploy automatico  ------- Finalizado

- 3) Configurar ao realizar pull request para staging disparar pipeline staging  ------- Finalizado
	
- 4) Configurar ao realizar pull request para master disparar pipeline master ------- Finalizado

- 5) Configurar o sonar (CODE QUALITY) ------- Finalizado

- 6) Habilitar docker

- 5) Atuar nos erros do sonar (CODE QUALITY)

----------------------------------------------------


*** rEPOSITORIO AI INSERIR SETAR ENABLE COMO TRUE
----------------------------------------------------
EF TIPS 

COMANDO 1 )					Add-Migration InitialCreate -Context SmartDigitalPsicoDataContext -OutputDir Migrations -Project SmartDigitalPsico.Data

COMANDO 2 )					Update-Database -Project  "SmartDigitalPsico.Data" -StartUpProject "SmartDigitalPsico.WebAPI" -Context SmartDigitalPsicoDataContext

COMANDO 3 "DELETAR" )		Update-Database -Migration 0 -Project  "SmartDigitalPsico.Data" -StartUpProject "SmartDigitalPsico.WebAPI" -Context SmartDigitalPsicoDataContext


NO APPSETINGS PARA O JWT FUNCIONAR PRECISA POR A CHAVE 

using (var hmac = new HMACSHA512())
{
byte[] key = hmac.Key;
secretKey = Convert.ToBase64String(key);

}

//Migrar o idimas da tabela para arquivo JSON.


--------- Para ativar o gatilho do github basta ativar a extensao do azure pipelines 
--GERAR A IMAGEM E SUBIR NO DOCKER
docker-compose build --force-rm

-- EXECUTAR 
docker-compose up

--VER IMAGENS CRIADA
docker images 

--docker run -d -p 443:443 --name nome-do-seu-container smartdigitalpsicowebapi_image

--docker run -d -p 443:443  smartdigitalpsicowebapi_image

--verificar se o contêiner Docker está sendo executado corretamente
docker ps

---------DOCKER ETPAS MANUAL 
docker login -u seu-usuario -p sua-senha

# Criar a imagem localmente
docker-compose up --build

#publicar a imagem no registro
docker push leonecr/smartdigitalpsicowebapi_image:latest
 

docker push leonecr/smartdigitalpsicowebapi_image:latest

--- 
docker run -p 54814:80 smartdigitalpsicowebapi_image --name smartdigitalpsicowebapi_app0
docker run -p 54815:443 smartdigitalpsicowebapi_image --name smartdigitalpsicowebapi_app1
-p 54815:80: Esta opção mapeia a porta 54815 do seu host para a porta 80 do contêiner Docker. Isso significa que qualquer tráfego que chega à porta 54815 do seu host será encaminhado para a porta 80 do contêiner Docker.